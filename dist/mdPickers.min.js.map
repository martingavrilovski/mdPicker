{"version":3,"sources":["mdPickers.min.js"],"names":["configIcons","$mdIconProvider","mdpIconsRegistry","angular","forEach","icon","index","id","url","runBlock","$templateCache","put","svg","$inject","module","config","run","constant","ngMessage","$mdUtil","restrict","priority","compile","element","inputContainer","getClosest","toggleClass","directive","CalendarCtrl","$scope","self","this","dow","moment","localeData","firstDayOfWeek","weekDays","concat","weekdaysMin","slice","daysInMonth","getDaysInMonth","days","date","firstDay","day","length","arr","i","value","enabled","isDayEnabled","toDate","push","minDate","maxDate","dateFilter","selectDate","dom","nextMonth","add","prevMonth","subtract","updateDaysInMonth","$watch","unix","newValue","oldValue","controller","DatePickerCtrl","$mdDialog","$mdMedia","$timeout","currentDate","options","isValid","displayFormat","labels","isFunction","selectingYear","isBefore","isAfter","yearItems","currentIndex_","PAGE_SIZE","START","year","END","getItemAtIndex","getLength","Math","min","floor","abs","selectYear","animate","showYear","yearTopIndex","showCalendar","cancel","confirm","hide","animating","noop","then","mdpCalendar","$animate","linkFn","scope","attrs","ctrl","animElements","querySelector","map","a","format","direction","addClass","removeClass","bindToController","templateUrl","controllerAs","link","mdpDatePicker","$mdpDatePicker","mdpDatePickerService","ngModel","$transclude","showPicker","ev","$modelValue","targetEvent","time","$setViewValue","$render","dateFormat","$validators","modelValue","viewValue","formatValidator","minDateValidator","maxDateValidator","filter","filterValidator","on","$on","off","require","postLink","updateInputElement","strValue","inputElement","size","inputContainerCtrl","setHasValue","$isEmpty","updateDate","isDate","$setValidity","$pristine","messages","hasClass","onInputElementEvents","event","target","$viewVaue","clone","append","type","isDefined","disabled","hasOwnProperty","$formatters","unshift","$parsers","parsed","originalModel","month","set","mdpModel","hour","minute","transclude","template","noFloat","mdpNoFloat","placeholder","mdpPlaceholder","openOnClick","mdpOpenOnClick","mask","mdpMask","mdpFormat","replace","post","LABEL_OK","LABEL_CANCEL","DISPLAY_FORMAT","setDisplayFormat","setOKButtonLabel","label","setCancelButtonLabel","$get","datePicker","Date","now","isObject","ok","show","clickOutsideToClose","locals","skipHide","provider","notVal","minDateValid","isSame","startOf","maxDateValid","notFunction","notFilter","service","factory","ClockCtrl","getPointerStyle","divider","vm","TYPE_HOURS","TYPE_MINUTES","degrees","round","selected","-webkit-transform","-ms-transform","transform","setTimeByDeg","deg","setTime","hours","minutes","init","steps","STEP_DEG","CLOCK_TYPES","range","TimePickerCtrl","switchView","currentView","VIEW_HOURS","VIEW_MINUTES","setAM","setPM","autoSwitch","clockHours","parseInt","clockMinutes","mdpClock","$$rAF","timepickerCtrl","$parent","timepicker","onEvent","containerCoords","currentTarget","getClientRects","x","offsetWidth","pageX","left","y","pageY","top","offsetHeight","atan2","PI","indexOf","e","mdpTimePicker","$mdpTimePicker","timeFormat","updateTime","$error","setInvalid","Object","keys","seconds","minTime","timePicker"],"mappings":"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","file":"mdPickers.min.js","sourcesContent":["(function() {\n\"use strict\";\n/* global moment, angular */\r\n(function() {\r\n    'use strict';\r\n\r\n    configIcons.$inject = [\"$mdIconProvider\", \"mdpIconsRegistry\"];\r\n    runBlock.$inject = [\"$templateCache\", \"mdpIconsRegistry\"];\r\n    angular\r\n        .module('mdPickers', [\r\n            'ngMaterial',\r\n            'ngAnimate',\r\n            'ngAria',\r\n            'ngMask'\r\n        ])\r\n        .config(configIcons)\r\n        .run(runBlock);\r\n\r\n    /** @ngInject */\r\n    function configIcons($mdIconProvider, mdpIconsRegistry) {\r\n        angular.forEach(mdpIconsRegistry, function(icon, index) {\r\n            $mdIconProvider.icon(icon.id, icon.url);\r\n        });\r\n    }\r\n\r\n    /** @ngInject */\r\n    function runBlock($templateCache, mdpIconsRegistry) {\r\n        angular.forEach(mdpIconsRegistry, function(icon, index) {\r\n            $templateCache.put(icon.url, icon.svg);\r\n        });\r\n    }\r\n\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('mdPickers')\r\n        .constant('mdpIconsRegistry', [{\r\n            id: 'mdp-chevron-left',\r\n            url: 'mdp-chevron-left.svg',\r\n            svg: '<svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\"/><path d=\"M0 0h24v24H0z\" fill=\"none\"/></svg>'\r\n        }, {\r\n            id: 'mdp-chevron-right',\r\n            url: 'mdp-chevron-right.svg',\r\n            svg: '<svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\"/><path d=\"M0 0h24v24H0z\" fill=\"none\"/></svg>'\r\n        }, {\r\n            id: 'mdp-access-time',\r\n            url: 'mdp-access-time.svg',\r\n            svg: '<svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\"/><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M12.5 7H11v6l5.25 3.15.75-1.23-4.5-2.67z\"/></svg>'\r\n        }, {\r\n            id: 'mdp-event',\r\n            url: 'mdp-event.svg',\r\n            svg: '<svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M17 12h-5v5h5v-5zM16 1v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2h-1V1h-2zm3 18H5V8h14v11z\"/><path d=\"M0 0h24v24H0z\" fill=\"none\"/></svg>'\r\n        }]);\r\n\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    ngMessage.$inject = [\"$mdUtil\"];\r\n    angular\r\n        .module('mdPickers')\r\n        .directive('ngMessage', ngMessage);\r\n\r\n    /** @ngInject */\r\n    function ngMessage($mdUtil) {\r\n        return {\r\n            restrict: 'EA',\r\n            priority: 101,\r\n            compile: function(element) {\r\n                var inputContainer = $mdUtil.getClosest(element, 'mdp-time-picker', true) ||\r\n                    $mdUtil.getClosest(element, 'mdp-date-picker', true);\r\n\r\n                // If we are not a child of an input container, don't do anything\r\n                if (!inputContainer) return;\r\n\r\n                // Add our animation class\r\n                element.toggleClass('md-input-message-animation', true);\r\n\r\n                return {};\r\n            }\r\n        }\r\n    }\r\n\r\n})();\r\n\n/* global moment, angular */\r\n(function () {\r\n    'use strict';\r\n\r\n    CalendarCtrl.$inject = [\"$scope\"];\r\n    angular\r\n        .module('mdPickers')\r\n        .controller('CalendarCtrl', CalendarCtrl);\r\n\r\n    /** @ngInject */\r\n    function CalendarCtrl($scope) {\r\n        var self = this;\r\n        this.dow = moment.localeData().firstDayOfWeek();\r\n\r\n        this.weekDays = [].concat(\r\n            moment.weekdaysMin().slice(\r\n                this.dow\r\n            ),\r\n            moment.weekdaysMin().slice(\r\n                0,\r\n                this.dow\r\n            )\r\n        );\r\n\r\n        this.daysInMonth = [];\r\n\r\n        this.getDaysInMonth = function() {\r\n            var days = self.date.daysInMonth(),\r\n                firstDay = moment(self.date).date(1).day() - this.dow;\r\n\r\n            if (firstDay < 0) firstDay = this.weekDays.length - 1;\r\n\r\n\r\n            var arr = [];\r\n            for (var i = 1; i <= (firstDay + days); i++) {\r\n                var day = null;\r\n                if (i > firstDay) {\r\n                    day = {\r\n                        value: (i - firstDay),\r\n                        enabled: self.isDayEnabled(moment(self.date).date(i - firstDay).toDate())\r\n                    };\r\n                }\r\n                arr.push(day);\r\n            }\r\n\r\n            return arr;\r\n        };\r\n\r\n        this.isDayEnabled = function(day) {\r\n            return (!this.minDate || this.minDate <= day) &&\r\n                (!this.maxDate || this.maxDate >= day) &&\r\n                (!self.dateFilter || !self.dateFilter(day));\r\n        };\r\n\r\n        this.selectDate = function(dom) {\r\n            self.date.date(dom);\r\n        };\r\n\r\n        this.nextMonth = function() {\r\n            self.date.add(1, 'months');\r\n        };\r\n\r\n        this.prevMonth = function() {\r\n            self.date.subtract(1, 'months');\r\n        };\r\n\r\n        this.updateDaysInMonth = function() {\r\n            self.daysInMonth = self.getDaysInMonth();\r\n        };\r\n\r\n        $scope.$watch(function() {\r\n            return self.date.unix() }, function(newValue, oldValue) {\r\n            if (newValue && newValue !== oldValue)\r\n                self.updateDaysInMonth();\r\n        })\r\n\r\n        self.updateDaysInMonth();\r\n    }\r\n\r\n})();\r\n\n/* global moment, angular */\r\n(function() {\r\n    'use strict';\r\n\r\n    DatePickerCtrl.$inject = [\"$scope\", \"$mdDialog\", \"$mdMedia\", \"$timeout\", \"currentDate\", \"options\"];\r\n    angular\r\n        .module('mdPickers')\r\n        .controller('DatePickerCtrl', DatePickerCtrl);\r\n\r\n    /** @ngInject */\r\n    function DatePickerCtrl($scope, $mdDialog, $mdMedia, $timeout, currentDate, options) {\r\n        var self = this;\r\n\r\n        this.date = moment(currentDate);\r\n        this.minDate = options.minDate && moment(options.minDate).isValid() ? moment(options.minDate) : null;\r\n        this.maxDate = options.maxDate && moment(options.maxDate).isValid() ? moment(options.maxDate) : null;\r\n        this.displayFormat = options.displayFormat || \"ddd, MMM DD\";\r\n        this.labels = options.labels;\r\n        this.dateFilter = angular.isFunction(options.dateFilter) ? options.dateFilter : null;\r\n        this.selectingYear = false;\r\n\r\n        // validate min and max date\r\n        if (this.minDate && this.maxDate) {\r\n            if (this.maxDate.isBefore(this.minDate)) {\r\n                this.maxDate = moment(this.minDate).add(1, 'days');\r\n            }\r\n        }\r\n\r\n        if (this.date) {\r\n            // check min date\r\n            if (this.minDate && this.date.isBefore(this.minDate)) {\r\n                this.date = moment(this.minDate);\r\n            }\r\n\r\n            // check max date\r\n            if (this.maxDate && this.date.isAfter(this.maxDate)) {\r\n                this.date = moment(this.maxDate);\r\n            }\r\n        }\r\n\r\n        this.yearItems = {\r\n            currentIndex_: 0,\r\n            PAGE_SIZE: 5,\r\n            START: (self.minDate ? self.minDate.year() : 1900),\r\n            END: (self.maxDate ? self.maxDate.year() : 0),\r\n            getItemAtIndex: function(index) {\r\n                if (this.currentIndex_ < index)\r\n                    this.currentIndex_ = index;\r\n\r\n                return this.START + index;\r\n            },\r\n            getLength: function() {\r\n                return Math.min(\r\n                    this.currentIndex_ + Math.floor(this.PAGE_SIZE / 2),\r\n                    Math.abs(this.START - this.END) + 1\r\n                );\r\n            }\r\n        };\r\n\r\n        $scope.$mdMedia = $mdMedia;\r\n        $scope.year = this.date.year();\r\n\r\n        this.selectYear = function(year) {\r\n            self.date.year(year);\r\n            $scope.year = year;\r\n            self.selectingYear = false;\r\n            self.animate();\r\n        };\r\n\r\n        this.showYear = function() {\r\n            self.yearTopIndex = (self.date.year() - self.yearItems.START) + Math.floor(self.yearItems.PAGE_SIZE / 2);\r\n            self.yearItems.currentIndex_ = (self.date.year() - self.yearItems.START) + 1;\r\n            self.selectingYear = true;\r\n        };\r\n\r\n        this.showCalendar = function() {\r\n            self.selectingYear = false;\r\n        };\r\n\r\n        this.cancel = function() {\r\n            $mdDialog.cancel();\r\n        };\r\n\r\n        this.confirm = function() {\r\n            var date = this.date;\r\n\r\n            if (this.minDate && this.date.isBefore(this.minDate)) {\r\n                date = moment(this.minDate);\r\n            }\r\n\r\n            if (this.maxDate && this.date.isAfter(this.maxDate)) {\r\n                date = moment(this.maxDate);\r\n            }\r\n\r\n            $mdDialog.hide(date.toDate());\r\n        };\r\n\r\n        this.animate = function() {\r\n            self.animating = true;\r\n            $timeout(angular.noop).then(function() {\r\n                self.animating = false;\r\n            })\r\n        };\r\n    }\r\n\r\n})();\r\n\n/* global moment, angular */\r\n\r\n(function() {\r\n    'use strict';\r\n\r\n    mdpCalendar.$inject = [\"$animate\"];\r\n    angular\r\n        .module('mdPickers')\r\n        .directive('mdpCalendar', mdpCalendar);\r\n\r\n    /** @ngInject */\r\n    function mdpCalendar($animate) {\r\n        var directive = {\r\n            restrict: 'E',\r\n            bindToController: {\r\n                'date': '=',\r\n                'minDate': '=',\r\n                'maxDate': '=',\r\n                'dateFilter': '='\r\n            },\r\n            templateUrl: 'mdpDatePicker/templates/mdp-date-picker-calendar.html',\r\n            controller: 'CalendarCtrl',\r\n            controllerAs: 'calendar',\r\n            link: linkFn\r\n        };\r\n\r\n        return directive;\r\n\r\n        function linkFn(scope, element, attrs, ctrl) {\r\n            var animElements = [\r\n                element[0].querySelector('.mdp-calendar-week-days'),\r\n                element[0].querySelector('.mdp-calendar-days'),\r\n                element[0].querySelector('.mdp-calendar-monthyear')\r\n            ].map(function(a) {\r\n                return angular.element(a);\r\n            });\r\n\r\n            scope.$watch(function() {\r\n                return ctrl.date.format('YYYYMM')\r\n            }, function(newValue, oldValue) {\r\n                var direction = null;\r\n\r\n                if (newValue > oldValue)\r\n                    direction = \"mdp-animate-next\";\r\n                else if (newValue < oldValue)\r\n                    direction = \"mdp-animate-prev\";\r\n\r\n                if (direction) {\r\n                    for (var i in animElements) {\r\n                        animElements[i].addClass(direction);\r\n                        $animate.removeClass(animElements[i], direction);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    mdpDatePicker.$inject = [\"$mdpDatePicker\", \"$timeout\", \"mdpDatePickerService\"];\r\n    angular\r\n        .module('mdPickers')\r\n        .directive(\"mdpDatePicker\", mdpDatePicker);\r\n\r\n    /** @ngInject */\r\n    function mdpDatePicker($mdpDatePicker, $timeout, mdpDatePickerService) {\r\n        var directive = {\r\n            restrict: 'A',\r\n            require: 'ngModel',\r\n            scope: {\r\n                \"minDate\": \"@min\",\r\n                \"maxDate\": \"@max\",\r\n                \"dateFilter\": \"=mdpDateFilter\",\r\n                \"dateFormat\": \"@mdpFormat\",\r\n            },\r\n            link: linkFn\r\n        };\r\n\r\n        return directive;\r\n\r\n        function linkFn(scope, element, attrs, ngModel, $transclude) {\r\n            scope.dateFormat = scope.dateFormat || \"YYYY-MM-DD\";\r\n\r\n            ngModel.$validators.format = function(modelValue, viewValue) {\r\n                return mdpDatePickerService.formatValidator(viewValue, scope.format);\r\n            };\r\n\r\n            ngModel.$validators.minDate = function(modelValue, viewValue) {\r\n                return mdpDatePickerService.minDateValidator(viewValue, scope.format, scope.minDate);\r\n            };\r\n\r\n            ngModel.$validators.maxDate = function(modelValue, viewValue) {\r\n                return mdpDatePickerService.maxDateValidator(viewValue, scope.format, scope.maxDate);\r\n            };\r\n\r\n            ngModel.$validators.filter = function(modelValue, viewValue) {\r\n                return mdpDatePickerService.filterValidator(viewValue, scope.format, scope.dateFilter);\r\n            };\r\n\r\n            function showPicker(ev) {\r\n                $mdpDatePicker(ngModel.$modelValue, {\r\n                    minDate: scope.minDate,\r\n                    maxDate: scope.maxDate,\r\n                    dateFilter: scope.dateFilter,\r\n                    targetEvent: ev\r\n                }).then(function(time) {\r\n                    ngModel.$setViewValue(moment(time).format(scope.format));\r\n                    ngModel.$render();\r\n                });\r\n            }\r\n\r\n            element.on('click', showPicker);\r\n\r\n            scope.$on('$destroy', function() {\r\n                element.off('click', showPicker);\r\n            });\r\n        }\r\n    }\r\n\r\n})();\n(function() {\r\n    'use strict';\r\n\r\n    mdpDatePicker.$inject = [\"$mdpDatePicker\", \"$timeout\", \"mdpDatePickerService\"];\r\n    angular\r\n        .module('mdPickers')\r\n        .directive('mdpDatePicker', mdpDatePicker);\r\n\r\n    /** @ngInject */\r\n    function mdpDatePicker($mdpDatePicker, $timeout, mdpDatePickerService) {\r\n\r\n        var directive = {\r\n            restrict: 'E',\r\n            require: 'ngModel',\r\n            transclude: true,\r\n            template: function(element, attrs) {\r\n                var noFloat = angular.isDefined(attrs.mdpNoFloat),\r\n                    placeholder = angular.isDefined(attrs.mdpPlaceholder) ? attrs.mdpPlaceholder : \"\",\r\n                    openOnClick = angular.isDefined(attrs.mdpOpenOnClick) ? true : false;\r\n                    var mask = '';\r\n                    if (attrs.mdpMask==='true') {\r\n                        mask = attrs.mdpFormat; \r\n                        if(!attrs.mdpFormat){\r\n                            mask = '9999-19-39';\r\n                        }else{\r\n                            mask = mask.replace('YYYY','9999');\r\n                            mask = mask.replace('MM','19');\r\n                            mask = mask.replace('DD','39'); \r\n                        }\r\n                        mask = ' mask=\"' + mask + '\" restrict=\"reject\" '\r\n                    }\r\n\r\n                return '<div layout layout-align=\"start start\">' +\r\n                            '<md-button ng-disabled=\"disabled\" class=\"md-icon-button\" ng-click=\"showPicker($event)\">' +\r\n                                '<md-icon md-svg-icon=\"mdp-event\"></md-icon>' +\r\n                            '</md-button>' +\r\n                            '<md-input-container' + (noFloat ? ' md-no-float' : '') + ' md-is-error=\"isError()\" flex>' +\r\n                                '<input ng-disabled=\"disabled\"'+mask+' ng-model=\"strValue\" type=\"{{ type }}\" aria-label=\"' + placeholder + '\" placeholder=\"' + placeholder + '\"' + (openOnClick ? ' ng-click=\"showPicker($event)\" ' : '') + ' />' +\r\n                            '</md-input-container>' +\r\n                        '</div>';\r\n            },\r\n            scope: {\r\n                'minDate': '=mdpMinDate',\r\n                'maxDate': '=mdpMaxDate',\r\n                'dateFilter': '=mdpDateFilter',\r\n                'dateFormat': '@mdpFormat',\r\n                'placeholder': '@mdpPlaceholder',\r\n                'noFloat': '=mdpNoFloat',\r\n                'openOnClick': '=mdpOpenOnClick',\r\n                'disabled': '=?mdpDisabled',\r\n                'mdpMask': '=',\r\n                'mdpModel': '=mdpModel'\r\n            },\r\n            link: {\r\n                post: postLink\r\n            }\r\n        };\r\n\r\n        return directive;\r\n\r\n        function postLink(scope, element, attrs, ngModel, $transclude) {\r\n            var inputElement = angular.element(element[0].querySelector('input')),\r\n                inputContainer = angular.element(element[0].querySelector('md-input-container')),\r\n                inputContainerCtrl = inputContainer.controller('mdInputContainer');\r\n                \r\n\r\n            $transclude(function(clone) {\r\n                inputContainer.append(clone);\r\n            });\r\n\r\n            var messages = angular.element(inputContainer[0].querySelector('[ng-messages]'));\r\n\r\n            scope.type = 'text';\r\n            scope.dateFormat = scope.dateFormat || 'YYYY-MM-DD';\r\n\r\n            if (!angular.isDefined(scope.disabled)) {\r\n                scope.disabled = attrs.hasOwnProperty('mdpDisabled');\r\n            }\r\n\r\n          /*  scope.isError = function() {\r\n                return !ngModel.$pristine && !!ngModel.$invalid;\r\n            };*/\r\n\r\n            // update input element if model has changed\r\n            ngModel.$formatters.unshift(function(value) {\r\n                var date = angular.isDate(value) && moment(value);\r\n                if (date && date.isValid()){\r\n                    updateInputElement(date.format(scope.dateFormat), value);\r\n                }else{\r\n                    updateInputElement();\r\n                }\r\n            });\r\n\r\n        /*  ngModel.$validators.format = function(modelValue, viewValue) {\r\n                return mdpDatePickerService.formatValidator(viewValue, scope.dateFormat);\r\n            };\r\n\r\n        */\r\n            ngModel.$validators.minDate = function(modelValue, viewValue) {\r\n                ngModel.$setValidity(\"minDate\", mdpDatePickerService.minDateValidator(viewValue, scope.dateFormat, scope.minDate));\r\n                return mdpDatePickerService.minDateValidator(viewValue, scope.dateFormat, scope.minDate);\r\n            };\r\n\r\n            ngModel.$validators.maxDate = function(modelValue, viewValue) {\r\n                ngModel.$setValidity(\"maxDate\", mdpDatePickerService.maxDateValidator(viewValue, scope.dateFormat, scope.maxDate));\r\n                return mdpDatePickerService.maxDateValidator(viewValue, scope.dateFormat, scope.maxDate);\r\n            };\r\n\r\n           /* ngModel.$validators.filter = function(modelValue, viewValue) {\r\n                return mdpDatePickerService.filterValidator(viewValue, scope.dateFormat, scope.dateFilter);\r\n            };*/\r\n            ngModel.$parsers.unshift(function(value) {\r\n                var parsed = moment(value, scope.dateFormat, true);\r\n                \r\n                if (parsed.isValid()) {\r\n\r\n                    if (angular.isDate(ngModel.$modelValue)) {\r\n                        var originalModel = moment(ngModel.$modelValue);\r\n                        originalModel.year(parsed.year());\r\n                        originalModel.month(parsed.month());\r\n                        originalModel.date(parsed.date());\r\n\r\n                        parsed = originalModel;\r\n                    }\r\n\r\n                    parsed.set('hour', moment(scope.mdpModel).hour());\r\n                    parsed.set('minute', moment(scope.mdpModel).minute());\r\n\r\n                    return parsed.toDate();\r\n                } \r\n                // else\r\n                //     return angular.isDate(ngModel.$modelValue) ? ngModel.$modelValue : null;\r\n            });\r\n\r\n            // update input element value\r\n            function updateInputElement(strValue, value) {\r\n                if (strValue){\r\n                    inputElement[0].size = strValue.length + 1;\r\n                    inputElement[0].value = strValue;\r\n\r\n                }else{\r\n                    inputElement[0].value = '';\r\n                }\r\n                inputContainerCtrl.setHasValue(!ngModel.$isEmpty(strValue));\r\n            }\r\n\r\n            function updateDate(date) {\r\n                var value = moment(date, angular.isDate(date) ? null : scope.dateFormat, true),\r\n                    strValue = value.format(scope.dateFormat);\r\n\r\n                if (value.isValid()) {\r\n                    ngModel.$setValidity(\"validFormat\", true);\r\n                    updateInputElement(strValue, value);\r\n                    ngModel.$setViewValue(strValue);\r\n                    \r\n                } else {\r\n                    if(date.length == 10){\r\n                        ngModel.$setViewValue('');\r\n                        ngModel.$setValidity(\"validFormat\", false);\r\n                    }\r\n                    else if(date.length == 0){\r\n                        ngModel.$setViewValue('');\r\n                        ngModel.$setValidity(\"validFormat\", true);\r\n                    }\r\n                    \r\n                }\r\n\r\n                if (!ngModel.$pristine &&\r\n                    messages.hasClass('md-auto-hide') &&\r\n                    inputContainer.hasClass('md-input-invalid')) messages.removeClass('md-auto-hide');\r\n\r\n                ngModel.$render();\r\n            }\r\n            \r\n            if (scope.mdpModel) {\r\n                var value = moment(scope.mdpModel, angular.isDate(scope.mdpModel) ? null : scope.dateFormat, true);\r\n                scope.strValue = value.format(scope.dateFormat);\r\n            }\r\n            // updateDate(scope.model);\r\n\r\n            scope.showPicker = function(ev) {\r\n                $mdpDatePicker(ngModel.$modelValue, {\r\n                    minDate: scope.minDate,\r\n                    maxDate: scope.maxDate,\r\n                    dateFilter: scope.dateFilter,\r\n                    targetEvent: ev\r\n                }).then(updateDate);\r\n            };\r\n\r\n            function onInputElementEvents(event) {\r\n\r\n                if (event.target.value !== ngModel.$viewVaue)\r\n                    updateDate(event.target.value);\r\n                if(event.target.value === \"\"){\r\n                    ngModel.$setValidity(\"validFormat\", true);\r\n                }\r\n            };\r\n\r\n            inputElement.on('reset input blur', onInputElementEvents);\r\n\r\n            scope.$on('$destroy', function() {\r\n                inputElement.off('reset input blur', onInputElementEvents);\r\n            });\r\n        }\r\n    }\r\n\r\n})();\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('mdPickers')\r\n        .provider(\"$mdpDatePicker\", $mdpDatePicker);\r\n\r\n    /** @ngInject */\r\n    function $mdpDatePicker() {\r\n        var LABEL_OK = 'OK',\r\n            LABEL_CANCEL = 'Cancel',\r\n            DISPLAY_FORMAT = 'ddd, MMM DD';\r\n\r\n        this.setDisplayFormat = function(format) {\r\n            DISPLAY_FORMAT = format;\r\n        };\r\n\r\n        this.setOKButtonLabel = function(label) {\r\n            LABEL_OK = label;\r\n        };\r\n\r\n        this.setCancelButtonLabel = function(label) {\r\n            LABEL_CANCEL = label;\r\n        };\r\n\r\n        /** @ngInject */\r\n        this.$get = [\"$mdDialog\", function($mdDialog) {\r\n            var datePicker = function(currentDate, options) {\r\n                if (!angular.isDate(currentDate)) currentDate = Date.now();\r\n                if (!angular.isObject(options)) options = {};\r\n\r\n                options.displayFormat = DISPLAY_FORMAT;\r\n                options.labels = {\r\n                    cancel: LABEL_CANCEL,\r\n                    ok: LABEL_OK\r\n                };\r\n\r\n                return $mdDialog.show({\r\n                    controller: 'DatePickerCtrl',\r\n                    controllerAs: 'datepicker',\r\n                    clickOutsideToClose: true,\r\n                    templateUrl: 'mdpDatePicker/templates/mdp-date-picker.html',\r\n                    targetEvent: options.targetEvent,\r\n                    locals: {\r\n                        currentDate: currentDate,\r\n                        options: options\r\n                    },\r\n                    skipHide: true\r\n                });\r\n            };\r\n\r\n            return datePicker;\r\n        }];\r\n        this.$get.$inject = [\"$mdDialog\"];\r\n    }\r\n\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('mdPickers')\r\n        .factory('mdpDatePickerService', mdpDatePickerService);\r\n\r\n    /** @ngInject */\r\n    function mdpDatePickerService() {\r\n\r\n        var service = {\r\n            formatValidator: formatValidator,\r\n            minDateValidator: minDateValidator,\r\n            maxDateValidator: maxDateValidator,\r\n            filterValidator: filterValidator\r\n        };\r\n\r\n        return service;\r\n\r\n        function formatValidator(value, format) {\r\n            var notVal = !value, isDate=angular.isDate(value), isValid=moment(value, format).isValid();\r\n            return notVal || isDate || isValid;\r\n        }\r\n\r\n        function minDateValidator(value, format, minDate) {\r\n            if (minDate) {\r\n                minDate = moment(minDate);\r\n                var date = angular.isDate(value) ? moment(value) : moment(value, format);\r\n                \r\n                var notVal = !value, isDate = angular.isDate(value), minDateValid = !minDate.isValid(), isAfter = (date.isAfter(minDate) || date.isSame(minDate.startOf('day')));\r\n                \r\n                return notVal || isDate || minDateValid || isAfter;\r\n            }\r\n        \r\n            return true;\r\n        }\r\n\r\n        function maxDateValidator(value, format, maxDate) {\r\n            if (maxDate) {\r\n                maxDate = moment(maxDate);\r\n                var date = angular.isDate(value) ? moment(value) : moment(value, format);\r\n\r\n                var notVal = !value, isDate = angular.isDate(value), maxDateValid = !maxDate.isValid(), isBefore = date.isBefore(maxDate) || date.isSame(maxDate);\r\n                return notVal || isDate || maxDateValid || isBefore;\r\n            }\r\n            return true;\r\n        }\r\n\r\n        function filterValidator(value, format, filter) {\r\n            if (filter) {\r\n                var date = angular.isDate(value) ? moment(value) : moment(value, format);\r\n                var notVal = !value, isDate=angular.isDate(value), notFunction=!angular.isFunction(filter), notFilter=!filter(date);\r\n                return notVal || isDate || notFunction || notFilter;\r\n            }\r\n            return true;\r\n        }\r\n\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    ClockCtrl.$inject = [\"$scope\"];\r\n    angular\r\n        .module('mdPickers')\r\n        .controller('ClockCtrl', ClockCtrl);\r\n\r\n    /** @ngInject */\r\n    function ClockCtrl($scope) {\r\n        var vm = this;\r\n\r\n        var TYPE_HOURS = \"hours\";\r\n        var TYPE_MINUTES = \"minutes\";\r\n\r\n        vm.STEP_DEG = 360 / 12;\r\n        vm.steps = [];\r\n        vm.CLOCK_TYPES = {\r\n            \"hours\": {\r\n                range: 12,\r\n            },\r\n            \"minutes\": {\r\n                range: 60,\r\n            }\r\n        };\r\n\r\n        vm.getPointerStyle = getPointerStyle;\r\n        vm.setTimeByDeg = setTimeByDeg;\r\n        vm.setTime = setTime;\r\n        vm.init = init;\r\n\r\n        vm.init();\r\n\r\n        function getPointerStyle() {\r\n            var divider = 1;\r\n            switch (vm.type) {\r\n                case TYPE_HOURS:\r\n                    divider = 12;\r\n                    break;\r\n                case TYPE_MINUTES:\r\n                    divider = 60;\r\n                    break;\r\n            }\r\n            var degrees = Math.round(vm.selected * (360 / divider)) - 180;\r\n            return {\r\n                \"-webkit-transform\": \"rotate(\" + degrees + \"deg)\",\r\n                \"-ms-transform\": \"rotate(\" + degrees + \"deg)\",\r\n                \"transform\": \"rotate(\" + degrees + \"deg)\"\r\n            }\r\n        }\r\n\r\n        function setTimeByDeg(deg) {\r\n            deg = deg >= 360 ? 0 : deg;\r\n            var divider = 0;\r\n            switch (vm.type) {\r\n                case TYPE_HOURS:\r\n                    divider = 12;\r\n                    break;\r\n                case TYPE_MINUTES:\r\n                    divider = 60;\r\n                    break;\r\n            }\r\n\r\n            vm.setTime(\r\n                Math.round(divider / 360 * deg)\r\n            );\r\n        }\r\n\r\n        function setTime(time, type) {\r\n            vm.selected = time;\r\n\r\n            switch (vm.type) {\r\n                case TYPE_HOURS:\r\n                    if (vm.time.format(\"A\") == \"PM\") time += 12;\r\n                    vm.time.hours(time);\r\n                    break;\r\n                case TYPE_MINUTES:\r\n                    if (time > 59) time -= 60;\r\n                    vm.time.minutes(time);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        function init() {\r\n            vm.type = vm.type || \"hours\";\r\n            switch (vm.type) {\r\n                case TYPE_HOURS:\r\n                    for (var i = 1; i <= 12; i++)\r\n                        vm.steps.push(i);\r\n                    vm.selected = vm.time.hours() || 0;\r\n                    if (vm.selected > 12) vm.selected -= 12;\r\n\r\n                    break;\r\n                case TYPE_MINUTES:\r\n                    for (var i = 5; i <= 55; i += 5)\r\n                        vm.steps.push(i);\r\n                    vm.steps.push(0);\r\n                    vm.selected = vm.time.minutes() || 0;\r\n\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    TimePickerCtrl.$inject = [\"$scope\", \"$mdDialog\", \"time\", \"options\", \"$mdMedia\"];\r\n    angular\r\n        .module('mdPickers')\r\n        .controller('TimePickerCtrl', TimePickerCtrl);\r\n\r\n    /** @ngInject */\r\n    function TimePickerCtrl($scope, $mdDialog, time, options, $mdMedia) {\r\n        var vm = this;\r\n\r\n        vm.VIEW_HOURS = 1;\r\n        vm.VIEW_MINUTES = 2;\r\n        vm.currentView = vm.VIEW_HOURS;\r\n        vm.time = moment(time);\r\n        vm.labels = options.labels;\r\n        vm.autoSwitch = !!options.autoSwitch;\r\n\r\n        vm.clockHours = parseInt(vm.time.format(\"h\"));\r\n        vm.clockMinutes = parseInt(vm.time.minutes());\r\n\r\n        vm.switchView = switchView;\r\n        vm.setAM = setAM;\r\n        vm.setPM = setPM;\r\n        vm.cancel = cancel;\r\n        vm.confirm = confirm;\r\n\r\n        $scope.$mdMedia = $mdMedia;\r\n\r\n        function switchView() {\r\n            vm.currentView = vm.currentView == vm.VIEW_HOURS ? vm.VIEW_MINUTES : vm.VIEW_HOURS;\r\n        }\r\n\r\n        function setAM() {\r\n            if (vm.time.hours() >= 12)\r\n                vm.time.hour(vm.time.hour() - 12);\r\n        }\r\n\r\n        function setPM() {\r\n            if (vm.time.hours() < 12)\r\n                vm.time.hour(vm.time.hour() + 12);\r\n        }\r\n\r\n        function cancel() {\r\n            $mdDialog.cancel();\r\n        }\r\n\r\n        function confirm() {\r\n            $mdDialog.hide(vm.time.toDate());\r\n        }\r\n    }\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    mdpClock.$inject = [\"$animate\", \"$timeout\", \"$$rAF\"];\r\n    angular\r\n        .module('mdPickers')\r\n        .directive('mdpClock', mdpClock);\r\n\r\n    /** @ngInject */\r\n    function mdpClock($animate, $timeout, $$rAF) {\r\n        var directive = {\r\n            restrict: 'E',\r\n            bindToController: {\r\n                'type': '@?',\r\n                'time': '=',\r\n                'autoSwitch': '=?'\r\n            },\r\n            replace: true,\r\n            templateUrl: 'mdpTimePicker/templates/clock.html',\r\n            controller: 'ClockCtrl',\r\n            controllerAs: 'clock',\r\n            link: linkFn\r\n        };\r\n\r\n        return directive;\r\n\r\n        function linkFn(scope, element, attrs, ctrl) {\r\n            var pointer = angular.element(element[0].querySelector('.mdp-pointer')),\r\n                timepickerCtrl = scope.$parent.timepicker;\r\n\r\n            var onEvent = function(event) {\r\n                var containerCoords = event.currentTarget.getClientRects()[0];\r\n                var x = ((event.currentTarget.offsetWidth / 2) - (event.pageX - containerCoords.left)),\r\n                    y = ((event.pageY - containerCoords.top) - (event.currentTarget.offsetHeight / 2));\r\n\r\n                var deg = Math.round((Math.atan2(x, y) * (180 / Math.PI)));\r\n                $$rAF(function() {\r\n                    $timeout(function() {\r\n                        ctrl.setTimeByDeg(deg + 180);\r\n                        if (ctrl.autoSwitch && ['mouseup', 'click'].indexOf(event.type) !== -1 && timepickerCtrl) timepickerCtrl.switchView();\r\n                    });\r\n                });\r\n            };\r\n\r\n            element.on('mousedown', function() {\r\n                element.on('mousemove', onEvent);\r\n            });\r\n\r\n            element.on('mouseup', function(e) {\r\n                element.off('mousemove', onEvent);\r\n            });\r\n\r\n            element.on('click', onEvent);\r\n            scope.$on('$destroy', function() {\r\n                element.off('click', onEvent);\r\n                element.off('mousemove', onEvent);\r\n            });\r\n        }\r\n    }\r\n\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    mdpTimePicker.$inject = [\"$mdpTimePicker\", \"$timeout\"];\r\n    angular\r\n        .module('mdPickers')\r\n        .directive('mdpTimePicker', mdpTimePicker);\r\n\r\n    /** @ngInject */\r\n    function mdpTimePicker($mdpTimePicker, $timeout) {\r\n        var directive = {\r\n            restrict: 'A',\r\n            require: 'ngModel',\r\n            scope: {\r\n                'timeFormat': '@mdpFormat',\r\n                'autoSwitch': '=?mdpAutoSwitch',\r\n            },\r\n            link: linkFn\r\n        }\r\n\r\n        return directive;\r\n\r\n        function linkFn(scope, element, attrs, ngModel, $transclude) {\r\n            scope.format = scope.format || \"HH:mm\";\r\n\r\n            function showPicker(ev) {\r\n                $mdpTimePicker(ngModel.$modelValue, {\r\n                    targetEvent: ev,\r\n                    autoSwitch: scope.autoSwitch\r\n                }).then(function(time) {\r\n                    ngModel.$setViewValue(moment(time).format(scope.format));\r\n                    ngModel.$render();\r\n                });\r\n            };\r\n\r\n            element.on('click', showPicker);\r\n\r\n            scope.$on('$destroy', function() {\r\n                element.off('click', showPicker);\r\n            });\r\n        }\r\n    }\r\n\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    mdpTimePicker.$inject = [\"$mdpTimePicker\", \"$timeout\"];\r\n    angular\r\n        .module('mdPickers')\r\n        .directive('mdpTimePicker', mdpTimePicker);\r\n\r\n    /** @ngInject */\r\n    function mdpTimePicker($mdpTimePicker, $timeout) {\r\n        var directive = {\r\n            restrict: 'E',\r\n            require: 'ngModel',\r\n            transclude: true,\r\n            template: function(element, attrs) {\r\n                var noFloat = angular.isDefined(attrs.mdpNoFloat),\r\n                    placeholder = angular.isDefined(attrs.mdpPlaceholder) ? attrs.mdpPlaceholder : \"\",\r\n                    openOnClick = angular.isDefined(attrs.mdpOpenOnClick) ? true : false;\r\n\r\n                var mask = '';\r\n                if (attrs.mdpMask === 'true') {\r\n                    mask = attrs.mdpFormat;\r\n                    if (!attrs.mdpFormat) {\r\n                        mask = '29:59';\r\n                    } else {\r\n                        mask = mask.replace('HH', '29');\r\n                        mask = mask.replace('mm', '59');\r\n                        mask = mask.replace('ss', '59');\r\n                    }\r\n                    mask = ' mask=\"' + mask + '\" restrict=\"reject\"'\r\n                }\r\n\r\n                return '<div layout layout-align=\"start start\">' +\r\n                    '<md-button ng-disabled=\"disabled\" class=\"md-icon-button\" ng-click=\"showPicker($event)\">' +\r\n                    '<md-icon md-svg-icon=\"mdp-access-time\"></md-icon>' +\r\n                    '</md-button>' +\r\n                    '<md-input-container flex' + (noFloat ? ' md-no-float' : '') + ' md-is-error=\"isError()\">' +\r\n                    '<input ng-disabled=\"disabled\"' + mask + ' ng-model=\"strValue\" type=\"{{ ::type }}\" aria-label=\"' + placeholder + '\" placeholder=\"' + placeholder + '\"' + (openOnClick ? ' ng-click=\"showPicker($event)\" ' : '') + ' />' +\r\n                    '</md-input-container>' +\r\n                    '</div>';\r\n            },\r\n            scope: {\r\n                'timeFormat': '@mdpFormat',\r\n                'placeholder': '@mdpPlaceholder',\r\n                'autoSwitch': '=?mdpAutoSwitch',\r\n                'disabled': '=?mdpDisabled',\r\n                'mdpMask': '=',\r\n                'mdpModel': '=mdpModel',\r\n                'minTime': '=mdpMinTime'\r\n                            },\r\n            link: linkFn\r\n        };\r\n\r\n        return directive;\r\n\r\n        function linkFn(scope, element, attrs, ngModel, $transclude) {\r\n            var inputElement = angular.element(element[0].querySelector('input')),\r\n                inputContainer = angular.element(element[0].querySelector('md-input-container')),\r\n                inputContainerCtrl = inputContainer.controller('mdInputContainer');\r\n\r\n            $transclude(function(clone) {\r\n                inputContainer.append(clone);\r\n            });\r\n\r\n            var messages = angular.element(inputContainer[0].querySelector('[ng-messages]'));\r\n\r\n            scope.type = 'text';\r\n            scope.timeFormat = scope.timeFormat || 'HH:mm';\r\n            scope.autoSwitch = scope.autoSwitch || false;\r\n            //scope.resetFormat = scope.timeFormat.replace(/\\w/g, '0');\r\n\r\n            if (!angular.isDefined(scope.disabled)) {\r\n                scope.disabled = attrs.hasOwnProperty('mdpDisabled');\r\n            }\r\n\r\n            scope.$watch(function() {\r\n                return ngModel.$error;\r\n            }, function(newValue, oldValue) {\r\n                inputContainerCtrl.setInvalid(!ngModel.$pristine && !!Object.keys(ngModel.$error).length);\r\n            }, true);\r\n\r\n            // update input element if model has changed\r\n            ngModel.$formatters.unshift(function(value) {\r\n                var time = angular.isDate(value) && moment(value);\r\n                if (time && time.isValid()) {\r\n                    updateInputElement(time.format(scope.timeFormat));\r\n                } else {\r\n                    updateInputElement('');\r\n                }\r\n            });\r\n\r\n            ngModel.$validators.format = function(modelValue, viewValue) {\r\n                return !viewValue || angular.isDate(viewValue) || moment(viewValue, scope.timeFormat, true).isValid();\r\n            };\r\n\r\n            ngModel.$parsers.unshift(function(value) {\r\n                var parsed = moment(value, scope.timeFormat, true);\r\n                if (parsed.isValid()) {\r\n                    if (moment(scope.mdpModel).isValid()) {\r\n                        parsed.set('year', moment(scope.mdpModel).year());\r\n                        parsed.set('month', moment(scope.mdpModel).month());\r\n                        parsed.set('date', moment(scope.mdpModel).date());\r\n                    }\r\n\r\n                    if (angular.isDate(ngModel.$modelValue)) {\r\n                        var originalModel = moment(ngModel.$modelValue);\r\n                        originalModel.minutes(parsed.minutes());\r\n                        originalModel.hours(parsed.hours());\r\n                        originalModel.seconds(parsed.seconds());\r\n\r\n                        parsed = originalModel;\r\n                    }\r\n                    return parsed.toDate();\r\n                } \r\n                else{\r\n                    return null;\r\n                }\r\n            });\r\n\r\n            // update input element value\r\n            function updateInputElement(value) {\r\n                if (value) {\r\n                    inputElement[0].size = value.length + 1;\r\n                    inputElement[0].value = value;\r\n                } else {\r\n                    inputElement[0].value = '';\r\n                }\r\n                inputContainerCtrl.setHasValue(!ngModel.$isEmpty(value));\r\n            }\r\n\r\n            function updateTime(time) {\r\n                var value = moment(time, angular.isDate(time) ? null : scope.timeFormat, true),\r\n                    strValue = value.format(scope.timeFormat);\r\n                \r\n                if (value.isValid()) {\r\n                    updateInputElement(strValue);\r\n                    ngModel.$setViewValue(strValue);\r\n                    ngModel.$setValidity(\"validFormat\", true);\r\n                } else {\r\n                    if(time.length === 5){\r\n                        // updateInputElement(time);\r\n                        ngModel.$setViewValue('');\r\n                        ngModel.$setValidity(\"validFormat\", false);\r\n                    }\r\n                }\r\n\r\n                if (!ngModel.$pristine &&\r\n                    messages.hasClass('md-auto-hide') &&\r\n                    inputContainer.hasClass('md-input-invalid')) messages.removeClass('md-auto-hide');\r\n\r\n                ngModel.$render();\r\n            }\r\n\r\n\r\n            if (scope.mdpModel) {\r\n                var value = moment(scope.mdpModel, angular.isDate(scope.mdpModel) ? null : scope.timeFormat, true);\r\n                scope.strValue = value.format(scope.timeFormat);\r\n            }\r\n\r\n            scope.showPicker = function(ev) {\r\n                $mdpTimePicker(ngModel.$modelValue, {\r\n                    minTime: scope.minTime,\r\n                    targetEvent: ev,\r\n                    autoSwitch: scope.autoSwitch\r\n                }).then(function(time) {\r\n                    updateTime(time, true);\r\n                });\r\n            };\r\n\r\n            function onInputElementEvents(event) {\r\n                if (event.target.value !== ngModel.$viewVaue)\r\n                    updateTime(event.target.value);\r\n                if(event.target.value === \"\"){\r\n                    ngModel.$setValidity(\"validFormat\", true);\r\n                }\r\n            }\r\n\r\n            inputElement.on('reset input blur', onInputElementEvents);\r\n\r\n            scope.$on('$destroy', function() {\r\n                inputElement.off('reset input blur', onInputElementEvents);\r\n            });\r\n        }\r\n    }\r\n\r\n})();\r\n\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('mdPickers')\r\n        .provider('$mdpTimePicker', $mdpTimePicker);\r\n\r\n    function $mdpTimePicker() {\r\n        var LABEL_OK = 'OK',\r\n            LABEL_CANCEL = 'Cancel';\r\n\r\n        this.setOKButtonLabel = function(label) {\r\n            LABEL_OK = label;\r\n        };\r\n\r\n        this.setCancelButtonLabel = function(label) {\r\n            LABEL_CANCEL = label;\r\n        };\r\n\r\n        /** @ngInject */\r\n        this.$get = [\"$mdDialog\", function($mdDialog) {\r\n            var timePicker = function(time, options) {\r\n                if (!angular.isDate(time)) time = Date.now();\r\n                if (!angular.isObject(options)) options = {};\r\n\r\n                options.labels = {\r\n                    cancel: LABEL_CANCEL,\r\n                    ok: LABEL_OK\r\n                };\r\n\r\n                return $mdDialog.show({\r\n                    controller: 'TimePickerCtrl',\r\n                    controllerAs: 'timepicker',\r\n                    clickOutsideToClose: true,\r\n                    templateUrl: 'mdpTimePicker/templates/mdp-time-picker.html',\r\n                    targetEvent: options.targetEvent,\r\n                    locals: {\r\n                        time: time,\r\n                        options: options\r\n                    },\r\n                    skipHide: true\r\n                });\r\n            };\r\n\r\n            return timePicker;\r\n        }];\r\n        this.$get.$inject = [\"$mdDialog\"];\r\n    }\r\n\r\n})();\r\n\n!function(e){try{e=angular.module(\"mdPickers\")}catch(a){e=angular.module(\"mdPickers\",[])}e.run([\"$templateCache\",function(e){e.put(\"mdpDatePicker/templates/mdp-date-picker-calendar.html\",'<div class=\"mdp-calendar\"><div layout=\"row\" layout-align=\"space-between center\"><md-button aria-label=\"previous month\" class=\"md-icon-button\" ng-click=\"calendar.prevMonth()\"><md-icon md-svg-icon=\"mdp-chevron-left\"></md-icon></md-button><div class=\"mdp-calendar-monthyear\" ng-show=\"!calendar.animating\">{{ calendar.date.format(\"MMMM YYYY\") }}</div><md-button aria-label=\"next month\" class=\"md-icon-button\" ng-click=\"calendar.nextMonth()\"><md-icon md-svg-icon=\"mdp-chevron-right\"></md-icon></md-button></div><div layout=\"row\" layout-align=\"space-around center\" class=\"mdp-calendar-week-days\" ng-show=\"!calendar.animating\"><div layout=\"\" layout-align=\"center center\" ng-repeat=\"d in ::calendar.weekDays track by $index\">{{ ::d }}</div></div><div layout=\"row\" layout-align=\"start center\" layout-wrap=\"\" class=\"mdp-calendar-days\" ng-class=\"{ \\'mdp-animate-next\\': calendar.animating }\" ng-show=\"!calendar.animating\" md-swipe-left=\"calendar.nextMonth()\" md-swipe-right=\"calendar.prevMonth()\"><div layout=\"\" layout-align=\"center center\" ng-repeat-start=\"day in calendar.daysInMonth track by $index\" ng-class=\"{ \\'mdp-day-placeholder\\': !day }\"><md-button class=\"md-icon-button md-raised\" aria-label=\"Select day\" ng-if=\"day\" ng-class=\"{ \\'md-accent\\': calendar.date.date() == day.value }\" ng-click=\"calendar.selectDate(day.value)\" ng-disabled=\"!day.enabled\">{{ day.value }}</md-button></div><div flex=\"100\" ng-if=\"($index + 1) % 7 == 0\" ng-repeat-end=\"\"></div></div></div>')}])}(),function(e){try{e=angular.module(\"mdPickers\")}catch(a){e=angular.module(\"mdPickers\",[])}e.run([\"$templateCache\",function(e){e.put(\"mdpDatePicker/templates/mdp-date-picker.html\",'<md-dialog class=\"mdp-datepicker\" ng-class=\"{portrait: !$mdMedia(\\'gt-xs\\')}\"><md-dialog-content layout=\"row\" layout-wrap=\"\"><div layout=\"column\" layout-align=\"start center\"><md-toolbar layout-align=\"start start\" flex=\"noshrink\" class=\"mdp-datepicker-date-wrapper md-hue-1 md-primary\" layout=\"column\"><span class=\"mdp-datepicker-year\" ng-click=\"datepicker.showYear()\" ng-class=\"{active: datepicker.selectingYear}\">{{ datepicker.date.format(\\'YYYY\\') }}</span> <span class=\"mdp-datepicker-date\" ng-click=\"datepicker.showCalendar()\" ng-class=\"{active: !datepicker.selectingYear}\">{{ datepicker.date.format(datepicker.displayFormat) }}</span></md-toolbar></div><div><div class=\"mdp-datepicker-select-year mdp-animation-zoom\" layout=\"column\" layout-align=\"center start\" ng-if=\"datepicker.selectingYear\"><md-virtual-repeat-container md-auto-shrink=\"\" md-top-index=\"datepicker.yearTopIndex\"><div flex=\"\" md-virtual-repeat=\"item in ::datepicker.yearItems\" md-on-demand=\"\" class=\"repeated-year\"><span class=\"md-button\" ng-click=\"datepicker.selectYear(item)\" md-ink-ripple=\"\" ng-class=\"{ \\'md-primary current\\': item == year }\">{{ item }}</span></div></md-virtual-repeat-container></div><mdp-calendar ng-if=\"!datepicker.selectingYear\" class=\"mdp-animation-zoom\" date=\"datepicker.date\" min-date=\"datepicker.minDate\" date-filter=\"datepicker.dateFilter\" max-date=\"datepicker.maxDate\"></mdp-calendar><md-dialog-actions layout=\"row\"><span flex=\"\"></span><md-button ng-click=\"datepicker.cancel()\" aria-label=\"{{::datepicker.labels.cancel}}\">{{::datepicker.labels.cancel}}</md-button><md-button ng-click=\"datepicker.confirm()\" class=\"md-primary\" aria-label=\"{{::datepicker.labels.ok}}\">{{::datepicker.labels.ok}}</md-button></md-dialog-actions></div></md-dialog-content></md-dialog>')}])}(),function(e){try{e=angular.module(\"mdPickers\")}catch(a){e=angular.module(\"mdPickers\",[])}e.run([\"$templateCache\",function(e){e.put(\"mdpTimePicker/templates/clock.html\",'<div class=\"mdp-clock\"><div class=\"mdp-clock-container\"><md-toolbar class=\"mdp-clock-center md-primary\"></md-toolbar><md-toolbar ng-style=\"clock.getPointerStyle()\" class=\"mdp-pointer md-primary\"><span class=\"mdp-clock-selected md-button md-raised md-primary\"></span></md-toolbar><md-button ng-class=\"{\\'md-primary\\': clock.selected == step}\" class=\"md-icon-button md-raised mdp-clock-deg{{ ::(clock.STEP_DEG * ($index + 1)) }}\" ng-repeat=\"step in clock.steps\" ng-click=\"clock.setTime(step)\">{{ step }}</md-button></div></div>')}])}(),function(e){try{e=angular.module(\"mdPickers\")}catch(a){e=angular.module(\"mdPickers\",[])}e.run([\"$templateCache\",function(e){e.put(\"mdpTimePicker/templates/mdp-time-picker.html\",'<md-dialog class=\"mdp-timepicker\" ng-class=\"{portrait: !$mdMedia(\\'gt-xs\\')}\"><md-dialog-content layout=\"column\" layout-gt-xs=\"row\"><md-toolbar layout-gt-xs=\"column\" layout-xs=\"row\" layout-align=\"center center\" flex=\"noshrink\" class=\"mdp-timepicker-time md-hue-1 md-primary\"><div class=\"mdp-timepicker-selected-time\"><span ng-class=\"{ \\'active\\': timepicker.currentView == timepicker.VIEW_HOURS }\" ng-click=\"timepicker.currentView = timepicker.VIEW_HOURS\">{{ timepicker.time.format(\"h\") }}</span>:<span ng-class=\"{ \\'active\\': timepicker.currentView == timepicker.VIEW_MINUTES }\" ng-click=\"timepicker.currentView = timepicker.VIEW_MINUTES\">{{ timepicker.time.format(\"mm\") }}</span></div><div layout=\"column\" class=\"mdp-timepicker-selected-ampm\"><span ng-click=\"timepicker.setAM()\" ng-class=\"{ \\'active\\': timepicker.time.hours() < 12 }\">AM</span> <span ng-click=\"timepicker.setPM()\" ng-class=\"{ \\'active\\': timepicker.time.hours() >= 12 }\">PM</span></div></md-toolbar><div flex=\"noshrink\"><div class=\"mdp-clock-switch-container\" ng-switch=\"timepicker.currentView\" layout=\"\" layout-align=\"center center\"><mdp-clock class=\"mdp-animation-zoom\" auto-switch=\"timepicker.autoSwitch\" time=\"timepicker.time\" type=\"hours\" ng-switch-when=\"1\"></mdp-clock><mdp-clock class=\"mdp-animation-zoom\" auto-switch=\"timepicker.autoSwitch\" time=\"timepicker.time\" type=\"minutes\" ng-switch-when=\"2\"></mdp-clock></div><md-dialog-actions layout=\"row\"><span flex=\"\"></span><md-button ng-click=\"timepicker.cancel()\" aria-label=\"{{::timepicker.labels.cancel}}\">{{::timepicker.labels.cancel}}</md-button><md-button ng-click=\"timepicker.confirm()\" class=\"md-primary\" aria-label=\"{{::timepicker.labels.ok}}\">{{::timepicker.labels.ok}}</md-button></md-dialog-actions></div></md-dialog-content></md-dialog>')}])}();\n})();"],"sourceRoot":"/source/"}