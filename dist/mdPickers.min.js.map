{"version":3,"sources":["mdPickers.min.js"],"names":["configIcons","$mdIconProvider","mdpIconsRegistry","angular","forEach","icon","index","id","url","runBlock","$templateCache","put","svg","$inject","module","config","run","constant","ngMessage","$mdUtil","restrict","priority","compile","element","inputContainer","getClosest","toggleClass","directive","CalendarCtrl","$scope","self","this","dow","moment","localeData","firstDayOfWeek","weekDays","concat","weekdaysMin","slice","daysInMonth","getDaysInMonth","days","date","firstDay","day","length","arr","i","value","enabled","isDayEnabled","toDate","push","minDate","maxDate","dateFilter","selectDate","dom","nextMonth","add","prevMonth","subtract","updateDaysInMonth","$watch","unix","newValue","oldValue","controller","DatePickerCtrl","$mdDialog","$mdMedia","$timeout","currentDate","options","isValid","displayFormat","labels","isFunction","selectingYear","isBefore","isAfter","yearItems","currentIndex_","PAGE_SIZE","START","year","END","getItemAtIndex","getLength","Math","min","floor","abs","selectYear","animate","showYear","yearTopIndex","showCalendar","cancel","confirm","hide","animating","noop","then","mdpCalendar","$animate","linkFn","scope","attrs","ctrl","animElements","querySelector","map","a","format","direction","addClass","removeClass","bindToController","templateUrl","controllerAs","link","mdpDatePicker","$mdpDatePicker","mdpDatePickerService","ngModel","$transclude","showPicker","ev","$modelValue","targetEvent","time","$setViewValue","$render","dateFormat","$validators","modelValue","viewValue","formatValidator","minDateValidator","maxDateValidator","filter","filterValidator","on","$on","off","require","postLink","updateInputElement","inputElement","size","inputContainerCtrl","setHasValue","$isEmpty","updateDate","isDate","strValue","$pristine","messages","hasClass","onInputElementEvents","event","target","$viewVaue","clone","append","type","model","isDefined","disabled","hasOwnProperty","isError","$invalid","$formatters","unshift","$parsers","parsed","originalModel","month","transclude","template","noFloat","mdpNoFloat","placeholder","mdpPlaceholder","openOnClick","mdpOpenOnClick","post","LABEL_OK","LABEL_CANCEL","DISPLAY_FORMAT","setDisplayFormat","setOKButtonLabel","label","setCancelButtonLabel","$get","datePicker","Date","now","isObject","ok","show","clickOutsideToClose","locals","skipHide","provider","notVal","minDateValid","maxDateValid","notFunction","notFilter","service","factory","ClockCtrl","getPointerStyle","divider","vm","TYPE_HOURS","TYPE_MINUTES","degrees","round","selected","-webkit-transform","-ms-transform","transform","setTimeByDeg","deg","setTime","hours","minutes","init","steps","STEP_DEG","CLOCK_TYPES","range","TimePickerCtrl","switchView","currentView","VIEW_HOURS","VIEW_MINUTES","setAM","hour","setPM","autoSwitch","clockHours","parseInt","clockMinutes","mdpClock","$$rAF","timepickerCtrl","$parent","timepicker","onEvent","containerCoords","currentTarget","getClientRects","x","offsetWidth","pageX","left","y","pageY","top","offsetHeight","atan2","PI","indexOf","e","replace","mdpTimePicker","$mdpTimePicker","timeFormat","updateTime","$error","setInvalid","Object","keys","seconds","timePicker"],"mappings":"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","file":"mdPickers.min.js","sourcesContent":["(function() {\n\"use strict\";\n/* global moment, angular */\n(function() {\n    'use strict';\n\n    configIcons.$inject = [\"$mdIconProvider\", \"mdpIconsRegistry\"];\n    runBlock.$inject = [\"$templateCache\", \"mdpIconsRegistry\"];\n    angular\n        .module('mdPickers', [\n            'ngMaterial',\n            'ngAnimate',\n            'ngAria'\n        ])\n        .config(configIcons)\n        .run(runBlock);\n\n    /** @ngInject */\n    function configIcons($mdIconProvider, mdpIconsRegistry) {\n        angular.forEach(mdpIconsRegistry, function(icon, index) {\n            $mdIconProvider.icon(icon.id, icon.url);\n        });\n    }\n\n    /** @ngInject */\n    function runBlock($templateCache, mdpIconsRegistry) {\n        angular.forEach(mdpIconsRegistry, function(icon, index) {\n            $templateCache.put(icon.url, icon.svg);\n        });\n    }\n\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('mdPickers')\n        .constant('mdpIconsRegistry', [{\n            id: 'mdp-chevron-left',\n            url: 'mdp-chevron-left.svg',\n            svg: '<svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\"/><path d=\"M0 0h24v24H0z\" fill=\"none\"/></svg>'\n        }, {\n            id: 'mdp-chevron-right',\n            url: 'mdp-chevron-right.svg',\n            svg: '<svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\"/><path d=\"M0 0h24v24H0z\" fill=\"none\"/></svg>'\n        }, {\n            id: 'mdp-access-time',\n            url: 'mdp-access-time.svg',\n            svg: '<svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\"/><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M12.5 7H11v6l5.25 3.15.75-1.23-4.5-2.67z\"/></svg>'\n        }, {\n            id: 'mdp-event',\n            url: 'mdp-event.svg',\n            svg: '<svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M17 12h-5v5h5v-5zM16 1v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2h-1V1h-2zm3 18H5V8h14v11z\"/><path d=\"M0 0h24v24H0z\" fill=\"none\"/></svg>'\n        }]);\n\n})();\n\n(function() {\n    'use strict';\n\n    ngMessage.$inject = [\"$mdUtil\"];\n    angular\n        .module('mdPickers')\n        .directive('ngMessage', ngMessage);\n\n    /** @ngInject */\n    function ngMessage($mdUtil) {\n        return {\n            restrict: 'EA',\n            priority: 101,\n            compile: function(element) {\n                var inputContainer = $mdUtil.getClosest(element, 'mdp-time-picker', true) ||\n                    $mdUtil.getClosest(element, 'mdp-date-picker', true);\n\n                // If we are not a child of an input container, don't do anything\n                if (!inputContainer) return;\n\n                // Add our animation class\n                element.toggleClass('md-input-message-animation', true);\n\n                return {};\n            }\n        }\n    }\n\n})();\n\n/* global moment, angular */\n(function () {\n    'use strict';\n\n    CalendarCtrl.$inject = [\"$scope\"];\n    angular\n        .module('mdPickers')\n        .controller('CalendarCtrl', CalendarCtrl);\n\n    /** @ngInject */\n    function CalendarCtrl($scope) {\n        var self = this;\n        this.dow = moment.localeData().firstDayOfWeek();\n\n        this.weekDays = [].concat(\n            moment.weekdaysMin().slice(\n                this.dow\n            ),\n            moment.weekdaysMin().slice(\n                0,\n                this.dow\n            )\n        );\n\n        this.daysInMonth = [];\n\n        this.getDaysInMonth = function() {\n            var days = self.date.daysInMonth(),\n                firstDay = moment(self.date).date(1).day() - this.dow;\n\n            if (firstDay < 0) firstDay = this.weekDays.length - 1;\n\n\n            var arr = [];\n            for (var i = 1; i <= (firstDay + days); i++) {\n                var day = null;\n                if (i > firstDay) {\n                    day = {\n                        value: (i - firstDay),\n                        enabled: self.isDayEnabled(moment(self.date).date(i - firstDay).toDate())\n                    };\n                }\n                arr.push(day);\n            }\n\n            return arr;\n        };\n\n        this.isDayEnabled = function(day) {\n            return (!this.minDate || this.minDate <= day) &&\n                (!this.maxDate || this.maxDate >= day) &&\n                (!self.dateFilter || !self.dateFilter(day));\n        };\n\n        this.selectDate = function(dom) {\n            self.date.date(dom);\n        };\n\n        this.nextMonth = function() {\n            self.date.add(1, 'months');\n        };\n\n        this.prevMonth = function() {\n            self.date.subtract(1, 'months');\n        };\n\n        this.updateDaysInMonth = function() {\n            self.daysInMonth = self.getDaysInMonth();\n        };\n\n        $scope.$watch(function() {\n            return self.date.unix() }, function(newValue, oldValue) {\n            if (newValue && newValue !== oldValue)\n                self.updateDaysInMonth();\n        })\n\n        self.updateDaysInMonth();\n    }\n\n})();\n\n/* global moment, angular */\n(function() {\n    'use strict';\n\n    DatePickerCtrl.$inject = [\"$scope\", \"$mdDialog\", \"$mdMedia\", \"$timeout\", \"currentDate\", \"options\"];\n    angular\n        .module('mdPickers')\n        .controller('DatePickerCtrl', DatePickerCtrl);\n\n    /** @ngInject */\n    function DatePickerCtrl($scope, $mdDialog, $mdMedia, $timeout, currentDate, options) {\n        var self = this;\n\n        this.date = moment(currentDate);\n        this.minDate = options.minDate && moment(options.minDate).isValid() ? moment(options.minDate) : null;\n        this.maxDate = options.maxDate && moment(options.maxDate).isValid() ? moment(options.maxDate) : null;\n        this.displayFormat = options.displayFormat || \"ddd, MMM DD\";\n        this.labels = options.labels;\n        this.dateFilter = angular.isFunction(options.dateFilter) ? options.dateFilter : null;\n        this.selectingYear = false;\n\n        // validate min and max date\n        if (this.minDate && this.maxDate) {\n            if (this.maxDate.isBefore(this.minDate)) {\n                this.maxDate = moment(this.minDate).add(1, 'days');\n            }\n        }\n\n        if (this.date) {\n            // check min date\n            if (this.minDate && this.date.isBefore(this.minDate)) {\n                this.date = moment(this.minDate);\n            }\n\n            // check max date\n            if (this.maxDate && this.date.isAfter(this.maxDate)) {\n                this.date = moment(this.maxDate);\n            }\n        }\n\n        this.yearItems = {\n            currentIndex_: 0,\n            PAGE_SIZE: 5,\n            START: (self.minDate ? self.minDate.year() : 1900),\n            END: (self.maxDate ? self.maxDate.year() : 0),\n            getItemAtIndex: function(index) {\n                if (this.currentIndex_ < index)\n                    this.currentIndex_ = index;\n\n                return this.START + index;\n            },\n            getLength: function() {\n                return Math.min(\n                    this.currentIndex_ + Math.floor(this.PAGE_SIZE / 2),\n                    Math.abs(this.START - this.END) + 1\n                );\n            }\n        };\n\n        $scope.$mdMedia = $mdMedia;\n        $scope.year = this.date.year();\n\n        this.selectYear = function(year) {\n            self.date.year(year);\n            $scope.year = year;\n            self.selectingYear = false;\n            self.animate();\n        };\n\n        this.showYear = function() {\n            self.yearTopIndex = (self.date.year() - self.yearItems.START) + Math.floor(self.yearItems.PAGE_SIZE / 2);\n            self.yearItems.currentIndex_ = (self.date.year() - self.yearItems.START) + 1;\n            self.selectingYear = true;\n        };\n\n        this.showCalendar = function() {\n            self.selectingYear = false;\n        };\n\n        this.cancel = function() {\n            $mdDialog.cancel();\n        };\n\n        this.confirm = function() {\n            var date = this.date;\n\n            if (this.minDate && this.date.isBefore(this.minDate)) {\n                date = moment(this.minDate);\n            }\n\n            if (this.maxDate && this.date.isAfter(this.maxDate)) {\n                date = moment(this.maxDate);\n            }\n\n            $mdDialog.hide(date.toDate());\n        };\n\n        this.animate = function() {\n            self.animating = true;\n            $timeout(angular.noop).then(function() {\n                self.animating = false;\n            })\n        };\n    }\n\n})();\n\n/* global moment, angular */\n\n(function() {\n    'use strict';\n\n    mdpCalendar.$inject = [\"$animate\"];\n    angular\n        .module('mdPickers')\n        .directive('mdpCalendar', mdpCalendar);\n\n    /** @ngInject */\n    function mdpCalendar($animate) {\n        var directive = {\n            restrict: 'E',\n            bindToController: {\n                'date': '=',\n                'minDate': '=',\n                'maxDate': '=',\n                'dateFilter': '='\n            },\n            templateUrl: 'mdpDatePicker/templates/mdp-date-picker-calendar.html',\n            controller: 'CalendarCtrl',\n            controllerAs: 'calendar',\n            link: linkFn\n        };\n\n        return directive;\n\n        function linkFn(scope, element, attrs, ctrl) {\n            var animElements = [\n                element[0].querySelector('.mdp-calendar-week-days'),\n                element[0].querySelector('.mdp-calendar-days'),\n                element[0].querySelector('.mdp-calendar-monthyear')\n            ].map(function(a) {\n                return angular.element(a);\n            });\n\n            scope.$watch(function() {\n                return ctrl.date.format('YYYYMM')\n            }, function(newValue, oldValue) {\n                var direction = null;\n\n                if (newValue > oldValue)\n                    direction = \"mdp-animate-next\";\n                else if (newValue < oldValue)\n                    direction = \"mdp-animate-prev\";\n\n                if (direction) {\n                    for (var i in animElements) {\n                        animElements[i].addClass(direction);\n                        $animate.removeClass(animElements[i], direction);\n                    }\n                }\n            });\n        }\n    }\n\n})();\n\n(function() {\n    'use strict';\n\n    mdpDatePicker.$inject = [\"$mdpDatePicker\", \"$timeout\", \"mdpDatePickerService\"];\n    angular\n        .module('mdPickers')\n        .directive(\"mdpDatePicker\", mdpDatePicker);\n\n    /** @ngInject */\n    function mdpDatePicker($mdpDatePicker, $timeout, mdpDatePickerService) {\n        var directive = {\n            restrict: 'A',\n            require: 'ngModel',\n            scope: {\n                \"minDate\": \"@min\",\n                \"maxDate\": \"@max\",\n                \"dateFilter\": \"=mdpDateFilter\",\n                \"dateFormat\": \"@mdpFormat\",\n            },\n            link: linkFn\n        };\n\n        return directive;\n\n        function linkFn(scope, element, attrs, ngModel, $transclude) {\n            scope.dateFormat = scope.dateFormat || \"YYYY-MM-DD\";\n\n            ngModel.$validators.format = function(modelValue, viewValue) {\n                return mdpDatePickerService.formatValidator(viewValue, scope.format);\n            };\n\n            ngModel.$validators.minDate = function(modelValue, viewValue) {\n                return mdpDatePickerService.minDateValidator(viewValue, scope.format, scope.minDate);\n            };\n\n            ngModel.$validators.maxDate = function(modelValue, viewValue) {\n                return mdpDatePickerService.maxDateValidator(viewValue, scope.format, scope.maxDate);\n            };\n\n            ngModel.$validators.filter = function(modelValue, viewValue) {\n                return mdpDatePickerService.filterValidator(viewValue, scope.format, scope.dateFilter);\n            };\n\n            function showPicker(ev) {\n                $mdpDatePicker(ngModel.$modelValue, {\n                    minDate: scope.minDate,\n                    maxDate: scope.maxDate,\n                    dateFilter: scope.dateFilter,\n                    targetEvent: ev\n                }).then(function(time) {\n                    ngModel.$setViewValue(moment(time).format(scope.format));\n                    ngModel.$render();\n                });\n            }\n\n            element.on('click', showPicker);\n\n            scope.$on('$destroy', function() {\n                element.off('click', showPicker);\n            });\n        }\n    }\n\n})();\n(function() {\n    'use strict';\n\n    mdpDatePicker.$inject = [\"$mdpDatePicker\", \"$timeout\", \"mdpDatePickerService\"];\n    angular\n        .module('mdPickers')\n        .directive('mdpDatePicker', mdpDatePicker);\n\n    /** @ngInject */\n    function mdpDatePicker($mdpDatePicker, $timeout, mdpDatePickerService) {\n\n        var directive = {\n            restrict: 'E',\n            require: 'ngModel',\n            transclude: true,\n            template: function(element, attrs) {\n                var noFloat = angular.isDefined(attrs.mdpNoFloat),\n                    placeholder = angular.isDefined(attrs.mdpPlaceholder) ? attrs.mdpPlaceholder : \"\",\n                    openOnClick = angular.isDefined(attrs.mdpOpenOnClick) ? true : false;\n\n                return '<div layout layout-align=\"start start\">' +\n                            '<md-button ng-disabled=\"disabled\" class=\"md-icon-button\" ng-click=\"showPicker($event)\">' +\n                                '<md-icon md-svg-icon=\"mdp-event\"></md-icon>' +\n                            '</md-button>' +\n                            '<md-input-container' + (noFloat ? ' md-no-float' : '') + ' md-is-error=\"isError()\" flex>' +\n                                '<input ng-disabled=\"disabled\" type=\"{{ type }}\" aria-label=\"' + placeholder + '\" placeholder=\"' + placeholder + '\"' + (openOnClick ? ' ng-click=\"showPicker($event)\" ' : '') + ' />' +\n                            '</md-input-container>' +\n                        '</div>';\n            },\n            scope: {\n                'minDate': '=mdpMinDate',\n                'maxDate': '=mdpMaxDate',\n                'dateFilter': '=mdpDateFilter',\n                'dateFormat': '@mdpFormat',\n                'placeholder': '@mdpPlaceholder',\n                'noFloat': '=mdpNoFloat',\n                'openOnClick': '=mdpOpenOnClick',\n                'disabled': '=?mdpDisabled'\n            },\n            link: {\n                post: postLink\n            }\n        };\n\n        return directive;\n\n        function postLink(scope, element, attrs, ngModel, $transclude) {\n            var inputElement = angular.element(element[0].querySelector('input')),\n                inputContainer = angular.element(element[0].querySelector('md-input-container')),\n                inputContainerCtrl = inputContainer.controller('mdInputContainer');\n\n            $transclude(function(clone) {\n                inputContainer.append(clone);\n            });\n\n            var messages = angular.element(inputContainer[0].querySelector('[ng-messages]'));\n\n            scope.type = scope.dateFormat ? 'text' : 'date';\n            scope.dateFormat = scope.dateFormat || 'YYYY-MM-DD';\n            scope.model = ngModel;\n\n            if (!angular.isDefined(scope.disabled)) {\n                scope.disabled = attrs.hasOwnProperty('mdpDisabled');\n            }\n\n            scope.isError = function() {\n                return !ngModel.$pristine && !!ngModel.$invalid;\n            };\n\n            // update input element if model has changed\n            ngModel.$formatters.unshift(function(value) {\n                var date = angular.isDate(value) && moment(value);\n                if (date && date.isValid()){\n                    updateInputElement(date.format(scope.dateFormat));\n                }else{\n                    updateInputElement();\n                }\n            });\n\n            ngModel.$validators.format = function(modelValue, viewValue) {\n                return mdpDatePickerService.formatValidator(viewValue, scope.dateFormat);\n            };\n\n            ngModel.$validators.minDate = function(modelValue, viewValue) {\n                return mdpDatePickerService.minDateValidator(viewValue, scope.dateFormat, scope.minDate);\n            };\n\n            ngModel.$validators.maxDate = function(modelValue, viewValue) {\n                return mdpDatePickerService.maxDateValidator(viewValue, scope.dateFormat, scope.maxDate);\n            };\n\n            ngModel.$validators.filter = function(modelValue, viewValue) {\n                return mdpDatePickerService.filterValidator(viewValue, scope.dateFormat, scope.dateFilter);\n            };\n\n            ngModel.$parsers.unshift(function(value) {\n                var parsed = moment(value, scope.dateFormat, true);\n                if (parsed.isValid()) {\n                    if (angular.isDate(ngModel.$modelValue)) {\n                        var originalModel = moment(ngModel.$modelValue);\n                        originalModel.year(parsed.year());\n                        originalModel.month(parsed.month());\n                        originalModel.date(parsed.date());\n\n                        parsed = originalModel;\n                    }\n                    return parsed.toDate();\n                } else\n                    return angular.isDate(ngModel.$modelValue) ? ngModel.$modelValue : null;\n            });\n\n            // update input element value\n            function updateInputElement(value) {\n                if (value){\n                    inputElement[0].size = value.length + 1;\n                    inputElement[0].value = value;\n                }else{\n                    inputElement[0].value = '';\n                }\n                inputContainerCtrl.setHasValue(!ngModel.$isEmpty(value));\n            }\n\n            function updateDate(date) {\n                var value = moment(date, angular.isDate(date) ? null : scope.dateFormat, true),\n                    strValue = value.format(scope.dateFormat);\n\n                if (value.isValid()) {\n                    updateInputElement(strValue);\n                    ngModel.$setViewValue(strValue);\n                } else {\n                    updateInputElement(date);\n                    ngModel.$setViewValue(date);\n                }\n\n                if (!ngModel.$pristine &&\n                    messages.hasClass('md-auto-hide') &&\n                    inputContainer.hasClass('md-input-invalid')) messages.removeClass('md-auto-hide');\n\n                ngModel.$render();\n            }\n\n            scope.showPicker = function(ev) {\n                $mdpDatePicker(ngModel.$modelValue, {\n                    minDate: scope.minDate,\n                    maxDate: scope.maxDate,\n                    dateFilter: scope.dateFilter,\n                    targetEvent: ev\n                }).then(updateDate);\n            };\n\n            function onInputElementEvents(event) {\n                if (event.target.value !== ngModel.$viewVaue)\n                    updateDate(event.target.value);\n            }\n\n            inputElement.on('reset input blur', onInputElementEvents);\n\n            scope.$on('$destroy', function() {\n                inputElement.off('reset input blur', onInputElementEvents);\n            });\n        }\n    }\n\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('mdPickers')\n        .provider(\"$mdpDatePicker\", $mdpDatePicker);\n\n    /** @ngInject */\n    function $mdpDatePicker() {\n        var LABEL_OK = 'OK',\n            LABEL_CANCEL = 'Cancel',\n            DISPLAY_FORMAT = 'ddd, MMM DD';\n\n        this.setDisplayFormat = function(format) {\n            DISPLAY_FORMAT = format;\n        };\n\n        this.setOKButtonLabel = function(label) {\n            LABEL_OK = label;\n        };\n\n        this.setCancelButtonLabel = function(label) {\n            LABEL_CANCEL = label;\n        };\n\n        /** @ngInject */\n        this.$get = [\"$mdDialog\", function($mdDialog) {\n            var datePicker = function(currentDate, options) {\n                if (!angular.isDate(currentDate)) currentDate = Date.now();\n                if (!angular.isObject(options)) options = {};\n\n                options.displayFormat = DISPLAY_FORMAT;\n                options.labels = {\n                    cancel: LABEL_CANCEL,\n                    ok: LABEL_OK\n                };\n\n                return $mdDialog.show({\n                    controller: 'DatePickerCtrl',\n                    controllerAs: 'datepicker',\n                    clickOutsideToClose: true,\n                    templateUrl: 'mdpDatePicker/templates/mdp-date-picker.html',\n                    targetEvent: options.targetEvent,\n                    locals: {\n                        currentDate: currentDate,\n                        options: options\n                    },\n                    skipHide: true\n                });\n            };\n\n            return datePicker;\n        }];\n        this.$get.$inject = [\"$mdDialog\"];\n    }\n\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('mdPickers')\n        .factory('mdpDatePickerService', mdpDatePickerService);\n\n    /** @ngInject */\n    function mdpDatePickerService() {\n\n        var service = {\n            formatValidator: formatValidator,\n            minDateValidator: minDateValidator,\n            maxDateValidator: maxDateValidator,\n            filterValidator: filterValidator\n        };\n\n        return service;\n\n        function formatValidator(value, format) {\n            var notVal = !value, isDate=angular.isDate(value), isValid=moment(value, format).isValid();\n            return notVal || isDate || isValid;\n        }\n\n        function minDateValidator(value, format, minDate) {\n            if (minDate) {\n                minDate = moment(minDate);\n                var date = angular.isDate(value) ? moment(value) : moment(value, format);\n\n                var notVal = !value, isDate = angular.isDate(value), minDateValid = !minDate.isValid(), isAfter = date.isAfter(minDate);\n                return notVal || isDate || minDateValid || isAfter;\n            }\n            return true;\n        }\n\n        function maxDateValidator(value, format, maxDate) {\n            if (maxDate) {\n                maxDate = moment(maxDate);\n                var date = angular.isDate(value) ? moment(value) : moment(value, format);\n\n                var notVal = !value, isDate = angular.isDate(value), maxDateValid = !maxDate.isValid(), isBefore = date.isBefore(maxDate);\n                return notVal || isDate || maxDateValid || isBefore;\n            }\n            return true;\n        }\n\n        function filterValidator(value, format, filter) {\n            if (filter) {\n                var date = angular.isDate(value) ? moment(value) : moment(value, format);\n                var notVal = !value, isDate=angular.isDate(value), notFunction=!angular.isFunction(filter), notFilter=!filter(date);\n                return notVal || isDate || notFunction || notFilter;\n            }\n            return true;\n        }\n\n    }\n})();\n\n(function() {\n    'use strict';\n\n    ClockCtrl.$inject = [\"$scope\"];\n    angular\n        .module('mdPickers')\n        .controller('ClockCtrl', ClockCtrl);\n\n    /** @ngInject */\n    function ClockCtrl($scope) {\n        var vm = this;\n\n        var TYPE_HOURS = \"hours\";\n        var TYPE_MINUTES = \"minutes\";\n\n        vm.STEP_DEG = 360 / 12;\n        vm.steps = [];\n        vm.CLOCK_TYPES = {\n            \"hours\": {\n                range: 12,\n            },\n            \"minutes\": {\n                range: 60,\n            }\n        };\n\n        vm.getPointerStyle = getPointerStyle;\n        vm.setTimeByDeg = setTimeByDeg;\n        vm.setTime = setTime;\n        vm.init = init;\n\n        vm.init();\n\n        function getPointerStyle() {\n            var divider = 1;\n            switch (vm.type) {\n                case TYPE_HOURS:\n                    divider = 12;\n                    break;\n                case TYPE_MINUTES:\n                    divider = 60;\n                    break;\n            }\n            var degrees = Math.round(vm.selected * (360 / divider)) - 180;\n            return {\n                \"-webkit-transform\": \"rotate(\" + degrees + \"deg)\",\n                \"-ms-transform\": \"rotate(\" + degrees + \"deg)\",\n                \"transform\": \"rotate(\" + degrees + \"deg)\"\n            }\n        }\n\n        function setTimeByDeg(deg) {\n            deg = deg >= 360 ? 0 : deg;\n            var divider = 0;\n            switch (vm.type) {\n                case TYPE_HOURS:\n                    divider = 12;\n                    break;\n                case TYPE_MINUTES:\n                    divider = 60;\n                    break;\n            }\n\n            vm.setTime(\n                Math.round(divider / 360 * deg)\n            );\n        }\n\n        function setTime(time, type) {\n            vm.selected = time;\n\n            switch (vm.type) {\n                case TYPE_HOURS:\n                    if (vm.time.format(\"A\") == \"PM\") time += 12;\n                    vm.time.hours(time);\n                    break;\n                case TYPE_MINUTES:\n                    if (time > 59) time -= 60;\n                    vm.time.minutes(time);\n                    break;\n            }\n        }\n\n        function init() {\n            vm.type = vm.type || \"hours\";\n            switch (vm.type) {\n                case TYPE_HOURS:\n                    for (var i = 1; i <= 12; i++)\n                        vm.steps.push(i);\n                    vm.selected = vm.time.hours() || 0;\n                    if (vm.selected > 12) vm.selected -= 12;\n\n                    break;\n                case TYPE_MINUTES:\n                    for (var i = 5; i <= 55; i += 5)\n                        vm.steps.push(i);\n                    vm.steps.push(0);\n                    vm.selected = vm.time.minutes() || 0;\n\n                    break;\n            }\n        }\n    }\n\n})();\n\n(function() {\n    'use strict';\n\n    TimePickerCtrl.$inject = [\"$scope\", \"$mdDialog\", \"time\", \"options\", \"$mdMedia\"];\n    angular\n        .module('mdPickers')\n        .controller('TimePickerCtrl', TimePickerCtrl);\n\n    /** @ngInject */\n    function TimePickerCtrl($scope, $mdDialog, time, options, $mdMedia) {\n        var vm = this;\n\n        vm.VIEW_HOURS = 1;\n        vm.VIEW_MINUTES = 2;\n        vm.currentView = vm.VIEW_HOURS;\n        vm.time = moment(time);\n        vm.labels = options.labels;\n        vm.autoSwitch = !!options.autoSwitch;\n\n        vm.clockHours = parseInt(vm.time.format(\"h\"));\n        vm.clockMinutes = parseInt(vm.time.minutes());\n\n        vm.switchView = switchView;\n        vm.setAM = setAM;\n        vm.setPM = setPM;\n        vm.cancel = cancel;\n        vm.confirm = confirm;\n\n        $scope.$mdMedia = $mdMedia;\n\n        function switchView() {\n            vm.currentView = vm.currentView == vm.VIEW_HOURS ? vm.VIEW_MINUTES : vm.VIEW_HOURS;\n        }\n\n        function setAM() {\n            if (vm.time.hours() >= 12)\n                vm.time.hour(vm.time.hour() - 12);\n        }\n\n        function setPM() {\n            if (vm.time.hours() < 12)\n                vm.time.hour(vm.time.hour() + 12);\n        }\n\n        function cancel() {\n            $mdDialog.cancel();\n        }\n\n        function confirm() {\n            $mdDialog.hide(vm.time.toDate());\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    mdpClock.$inject = [\"$animate\", \"$timeout\", \"$$rAF\"];\n    angular\n        .module('mdPickers')\n        .directive('mdpClock', mdpClock);\n\n    /** @ngInject */\n    function mdpClock($animate, $timeout, $$rAF) {\n        var directive = {\n            restrict: 'E',\n            bindToController: {\n                'type': '@?',\n                'time': '=',\n                'autoSwitch': '=?'\n            },\n            replace: true,\n            templateUrl: 'mdpTimePicker/templates/clock.html',\n            controller: 'ClockCtrl',\n            controllerAs: 'clock',\n            link: linkFn\n        };\n\n        return directive;\n\n        function linkFn(scope, element, attrs, ctrl) {\n            var pointer = angular.element(element[0].querySelector('.mdp-pointer')),\n                timepickerCtrl = scope.$parent.timepicker;\n\n            var onEvent = function(event) {\n                var containerCoords = event.currentTarget.getClientRects()[0];\n                var x = ((event.currentTarget.offsetWidth / 2) - (event.pageX - containerCoords.left)),\n                    y = ((event.pageY - containerCoords.top) - (event.currentTarget.offsetHeight / 2));\n\n                var deg = Math.round((Math.atan2(x, y) * (180 / Math.PI)));\n                $$rAF(function() {\n                    $timeout(function() {\n                        ctrl.setTimeByDeg(deg + 180);\n                        if (ctrl.autoSwitch && ['mouseup', 'click'].indexOf(event.type) !== -1 && timepickerCtrl) timepickerCtrl.switchView();\n                    });\n                });\n            };\n\n            element.on('mousedown', function() {\n                element.on('mousemove', onEvent);\n            });\n\n            element.on('mouseup', function(e) {\n                element.off('mousemove', onEvent);\n            });\n\n            element.on('click', onEvent);\n            scope.$on('$destroy', function() {\n                element.off('click', onEvent);\n                element.off('mousemove', onEvent);\n            });\n        }\n    }\n\n})();\n\n(function() {\n    'use strict';\n\n    mdpTimePicker.$inject = [\"$mdpTimePicker\", \"$timeout\"];\n    angular\n        .module('mdPickers')\n        .directive('mdpTimePicker', mdpTimePicker);\n\n    /** @ngInject */\n    function mdpTimePicker($mdpTimePicker, $timeout) {\n        var directive = {\n            restrict: 'A',\n            require: 'ngModel',\n            scope: {\n                'timeFormat': '@mdpFormat',\n                'autoSwitch': '=?mdpAutoSwitch',\n            },\n            link: linkFn\n        }\n\n        return directive;\n\n        function linkFn(scope, element, attrs, ngModel, $transclude) {\n            scope.format = scope.format || \"HH:mm\";\n\n            function showPicker(ev) {\n                $mdpTimePicker(ngModel.$modelValue, {\n                    targetEvent: ev,\n                    autoSwitch: scope.autoSwitch\n                }).then(function(time) {\n                    ngModel.$setViewValue(moment(time).format(scope.format));\n                    ngModel.$render();\n                });\n            };\n\n            element.on('click', showPicker);\n\n            scope.$on('$destroy', function() {\n                element.off('click', showPicker);\n            });\n        }\n    }\n\n})();\n\n(function() {\n    'use strict';\n\n    mdpTimePicker.$inject = [\"$mdpTimePicker\", \"$timeout\"];\n    angular\n        .module('mdPickers')\n        .directive('mdpTimePicker', mdpTimePicker);\n\n    /** @ngInject */\n    function mdpTimePicker($mdpTimePicker, $timeout) {\n        var directive = {\n            restrict: 'E',\n            require: 'ngModel',\n            transclude: true,\n            template: function(element, attrs) {\n                var noFloat = angular.isDefined(attrs.mdpNoFloat),\n                    placeholder = angular.isDefined(attrs.mdpPlaceholder) ? attrs.mdpPlaceholder : \"\",\n                    openOnClick = angular.isDefined(attrs.mdpOpenOnClick) ? true : false;\n\n                return '<div layout layout-align=\"start start\">' +\n                            '<md-button ng-disabled=\"disabled\" class=\"md-icon-button\" ng-click=\"showPicker($event)\">' +\n                                '<md-icon md-svg-icon=\"mdp-access-time\"></md-icon>' +\n                            '</md-button>' +\n                            '<md-input-container flex' + (noFloat ? ' md-no-float' : '') + ' md-is-error=\"isError()\">' +\n                                '<input ng-disabled=\"disabled\" type=\"{{ ::type }}\" aria-label=\"' + placeholder + '\" placeholder=\"' + placeholder + '\"' + (openOnClick ? ' ng-click=\"showPicker($event)\" ' : '') + ' />' +\n                            '</md-input-container>' +\n                        '</div>';\n            },\n            scope: {\n                'timeFormat': '@mdpFormat',\n                'placeholder': '@mdpPlaceholder',\n                'autoSwitch': '=?mdpAutoSwitch',\n                'disabled': '=?mdpDisabled'\n            },\n            link: linkFn\n        };\n\n        return directive;\n\n        function linkFn(scope, element, attrs, ngModel, $transclude) {\n            var inputElement = angular.element(element[0].querySelector('input')),\n                inputContainer = angular.element(element[0].querySelector('md-input-container')),\n                inputContainerCtrl = inputContainer.controller('mdInputContainer');\n\n            $transclude(function(clone) {\n                inputContainer.append(clone);\n            });\n\n            var messages = angular.element(inputContainer[0].querySelector('[ng-messages]'));\n\n            scope.type = scope.timeFormat ? 'text' : 'time';\n            scope.timeFormat = scope.timeFormat || 'HH:mm';\n            scope.autoSwitch = scope.autoSwitch || false;\n\n            if (!angular.isDefined(scope.disabled)) {\n                scope.disabled = attrs.hasOwnProperty('mdpDisabled');\n            }\n\n            scope.$watch(function() {\n                return ngModel.$error;\n            }, function(newValue, oldValue) {\n                inputContainerCtrl.setInvalid(!ngModel.$pristine && !!Object.keys(ngModel.$error).length);\n            }, true);\n\n            // update input element if model has changed\n            ngModel.$formatters.unshift(function(value) {\n                var time = angular.isDate(value) && moment(value);\n                if (time && time.isValid()){\n                    updateInputElement(time.format(scope.timeFormat));\n                }else{\n                    updateInputElement('');\n                }\n            });\n\n            ngModel.$validators.format = function(modelValue, viewValue) {\n                return !viewValue || angular.isDate(viewValue) || moment(viewValue, scope.timeFormat, true).isValid();\n            };\n\n            ngModel.$parsers.unshift(function(value) {\n                var parsed = moment(value, scope.timeFormat, true);\n                if (parsed.isValid()) {\n                    if (angular.isDate(ngModel.$modelValue)) {\n                        var originalModel = moment(ngModel.$modelValue);\n                        originalModel.minutes(parsed.minutes());\n                        originalModel.hours(parsed.hours());\n                        originalModel.seconds(parsed.seconds());\n\n                        parsed = originalModel;\n                    }\n                    return parsed.toDate();\n                } else\n                    return angular.isDate(ngModel.$modelValue) ? ngModel.$modelValue : null;\n            });\n\n            // update input element value\n            function updateInputElement(value) {\n                if (value){\n                    inputElement[0].size = value.length + 1;\n                    inputElement[0].value = value;\n                }else{\n                    inputElement[0].value = '';\n                }\n                inputContainerCtrl.setHasValue(!ngModel.$isEmpty(value));\n            }\n\n            function updateTime(time) {\n                var value = moment(time, angular.isDate(time) ? null : scope.timeFormat, true),\n                    strValue = value.format(scope.timeFormat);\n\n                if (value.isValid()) {\n                    updateInputElement(strValue);\n                    ngModel.$setViewValue(strValue);\n                } else {\n                    updateInputElement(time);\n                    ngModel.$setViewValue(time);\n                }\n\n                if (!ngModel.$pristine &&\n                    messages.hasClass('md-auto-hide') &&\n                    inputContainer.hasClass('md-input-invalid')) messages.removeClass('md-auto-hide');\n\n                ngModel.$render();\n            }\n\n            scope.showPicker = function(ev) {\n                $mdpTimePicker(ngModel.$modelValue, {\n                    targetEvent: ev,\n                    autoSwitch: scope.autoSwitch\n                }).then(function(time) {\n                    updateTime(time, true);\n                });\n            };\n\n            function onInputElementEvents(event) {\n                if (event.target.value !== ngModel.$viewVaue)\n                    updateTime(event.target.value);\n            }\n\n            inputElement.on('reset input blur', onInputElementEvents);\n\n            scope.$on('$destroy', function() {\n                inputElement.off('reset input blur', onInputElementEvents);\n            });\n        }\n    }\n\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('mdPickers')\n        .provider('$mdpTimePicker', $mdpTimePicker);\n\n    function $mdpTimePicker() {\n        var LABEL_OK = 'OK',\n            LABEL_CANCEL = 'Cancel';\n\n        this.setOKButtonLabel = function(label) {\n            LABEL_OK = label;\n        };\n\n        this.setCancelButtonLabel = function(label) {\n            LABEL_CANCEL = label;\n        };\n\n        /** @ngInject */\n        this.$get = [\"$mdDialog\", function($mdDialog) {\n            var timePicker = function(time, options) {\n                if (!angular.isDate(time)) time = Date.now();\n                if (!angular.isObject(options)) options = {};\n\n                options.labels = {\n                    cancel: LABEL_CANCEL,\n                    ok: LABEL_OK\n                };\n\n                return $mdDialog.show({\n                    controller: 'TimePickerCtrl',\n                    controllerAs: 'timepicker',\n                    clickOutsideToClose: true,\n                    templateUrl: 'mdpTimePicker/templates/mdp-time-picker.html',\n                    targetEvent: options.targetEvent,\n                    locals: {\n                        time: time,\n                        options: options\n                    },\n                    skipHide: true\n                });\n            };\n\n            return timePicker;\n        }];\n        this.$get.$inject = [\"$mdDialog\"];\n    }\n\n})();\n\n!function(e){try{e=angular.module(\"mdPickers\")}catch(a){e=angular.module(\"mdPickers\",[])}e.run([\"$templateCache\",function(e){e.put(\"mdpDatePicker/templates/mdp-date-picker-calendar.html\",'<div class=\"mdp-calendar\"><div layout=\"row\" layout-align=\"space-between center\"><md-button aria-label=\"previous month\" class=\"md-icon-button\" ng-click=\"calendar.prevMonth()\"><md-icon md-svg-icon=\"mdp-chevron-left\"></md-icon></md-button><div class=\"mdp-calendar-monthyear\" ng-show=\"!calendar.animating\">{{ calendar.date.format(\"MMMM YYYY\") }}</div><md-button aria-label=\"next month\" class=\"md-icon-button\" ng-click=\"calendar.nextMonth()\"><md-icon md-svg-icon=\"mdp-chevron-right\"></md-icon></md-button></div><div layout=\"row\" layout-align=\"space-around center\" class=\"mdp-calendar-week-days\" ng-show=\"!calendar.animating\"><div layout=\"\" layout-align=\"center center\" ng-repeat=\"d in ::calendar.weekDays track by $index\">{{ ::d }}</div></div><div layout=\"row\" layout-align=\"start center\" layout-wrap=\"\" class=\"mdp-calendar-days\" ng-class=\"{ \\'mdp-animate-next\\': calendar.animating }\" ng-show=\"!calendar.animating\" md-swipe-left=\"calendar.nextMonth()\" md-swipe-right=\"calendar.prevMonth()\"><div layout=\"\" layout-align=\"center center\" ng-repeat-start=\"day in calendar.daysInMonth track by $index\" ng-class=\"{ \\'mdp-day-placeholder\\': !day }\"><md-button class=\"md-icon-button md-raised\" aria-label=\"Select day\" ng-if=\"day\" ng-class=\"{ \\'md-accent\\': calendar.date.date() == day.value }\" ng-click=\"calendar.selectDate(day.value)\" ng-disabled=\"!day.enabled\">{{ day.value }}</md-button></div><div flex=\"100\" ng-if=\"($index + 1) % 7 == 0\" ng-repeat-end=\"\"></div></div></div>')}])}(),function(e){try{e=angular.module(\"mdPickers\")}catch(a){e=angular.module(\"mdPickers\",[])}e.run([\"$templateCache\",function(e){e.put(\"mdpDatePicker/templates/mdp-date-picker.html\",'<md-dialog class=\"mdp-datepicker\" ng-class=\"{portrait: !$mdMedia(\\'gt-xs\\')}\"><md-dialog-content layout=\"row\" layout-wrap=\"\"><div layout=\"column\" layout-align=\"start center\"><md-toolbar layout-align=\"start start\" flex=\"noshrink\" class=\"mdp-datepicker-date-wrapper md-hue-1 md-primary\" layout=\"column\"><span class=\"mdp-datepicker-year\" ng-click=\"datepicker.showYear()\" ng-class=\"{active: datepicker.selectingYear}\">{{ datepicker.date.format(\\'YYYY\\') }}</span> <span class=\"mdp-datepicker-date\" ng-click=\"datepicker.showCalendar()\" ng-class=\"{active: !datepicker.selectingYear}\">{{ datepicker.date.format(datepicker.displayFormat) }}</span></md-toolbar></div><div><div class=\"mdp-datepicker-select-year mdp-animation-zoom\" layout=\"column\" layout-align=\"center start\" ng-if=\"datepicker.selectingYear\"><md-virtual-repeat-container md-auto-shrink=\"\" md-top-index=\"datepicker.yearTopIndex\"><div flex=\"\" md-virtual-repeat=\"item in ::datepicker.yearItems\" md-on-demand=\"\" class=\"repeated-year\"><span class=\"md-button\" ng-click=\"datepicker.selectYear(item)\" md-ink-ripple=\"\" ng-class=\"{ \\'md-primary current\\': item == year }\">{{ item }}</span></div></md-virtual-repeat-container></div><mdp-calendar ng-if=\"!datepicker.selectingYear\" class=\"mdp-animation-zoom\" date=\"datepicker.date\" min-date=\"datepicker.minDate\" date-filter=\"datepicker.dateFilter\" max-date=\"datepicker.maxDate\"></mdp-calendar><md-dialog-actions layout=\"row\"><span flex=\"\"></span><md-button ng-click=\"datepicker.cancel()\" aria-label=\"{{::datepicker.labels.cancel}}\">{{::datepicker.labels.cancel}}</md-button><md-button ng-click=\"datepicker.confirm()\" class=\"md-primary\" aria-label=\"{{::datepicker.labels.ok}}\">{{::datepicker.labels.ok}}</md-button></md-dialog-actions></div></md-dialog-content></md-dialog>')}])}(),function(e){try{e=angular.module(\"mdPickers\")}catch(a){e=angular.module(\"mdPickers\",[])}e.run([\"$templateCache\",function(e){e.put(\"mdpTimePicker/templates/clock.html\",'<div class=\"mdp-clock\"><div class=\"mdp-clock-container\"><md-toolbar class=\"mdp-clock-center md-primary\"></md-toolbar><md-toolbar ng-style=\"clock.getPointerStyle()\" class=\"mdp-pointer md-primary\"><span class=\"mdp-clock-selected md-button md-raised md-primary\"></span></md-toolbar><md-button ng-class=\"{\\'md-primary\\': clock.selected == step}\" class=\"md-icon-button md-raised mdp-clock-deg{{ ::(clock.STEP_DEG * ($index + 1)) }}\" ng-repeat=\"step in clock.steps\" ng-click=\"clock.setTime(step)\">{{ step }}</md-button></div></div>')}])}(),function(e){try{e=angular.module(\"mdPickers\")}catch(a){e=angular.module(\"mdPickers\",[])}e.run([\"$templateCache\",function(e){e.put(\"mdpTimePicker/templates/mdp-time-picker.html\",'<md-dialog class=\"mdp-timepicker\" ng-class=\"{portrait: !$mdMedia(\\'gt-xs\\')}\"><md-dialog-content layout=\"column\" layout-gt-xs=\"row\"><md-toolbar layout-gt-xs=\"column\" layout-xs=\"row\" layout-align=\"center center\" flex=\"noshrink\" class=\"mdp-timepicker-time md-hue-1 md-primary\"><div class=\"mdp-timepicker-selected-time\"><span ng-class=\"{ \\'active\\': timepicker.currentView == timepicker.VIEW_HOURS }\" ng-click=\"timepicker.currentView = timepicker.VIEW_HOURS\">{{ timepicker.time.format(\"h\") }}</span>:<span ng-class=\"{ \\'active\\': timepicker.currentView == timepicker.VIEW_MINUTES }\" ng-click=\"timepicker.currentView = timepicker.VIEW_MINUTES\">{{ timepicker.time.format(\"mm\") }}</span></div><div layout=\"column\" class=\"mdp-timepicker-selected-ampm\"><span ng-click=\"timepicker.setAM()\" ng-class=\"{ \\'active\\': timepicker.time.hours() < 12 }\">AM</span> <span ng-click=\"timepicker.setPM()\" ng-class=\"{ \\'active\\': timepicker.time.hours() >= 12 }\">PM</span></div></md-toolbar><div flex=\"noshrink\"><div class=\"mdp-clock-switch-container\" ng-switch=\"timepicker.currentView\" layout=\"\" layout-align=\"center center\"><mdp-clock class=\"mdp-animation-zoom\" auto-switch=\"timepicker.autoSwitch\" time=\"timepicker.time\" type=\"hours\" ng-switch-when=\"1\"></mdp-clock><mdp-clock class=\"mdp-animation-zoom\" auto-switch=\"timepicker.autoSwitch\" time=\"timepicker.time\" type=\"minutes\" ng-switch-when=\"2\"></mdp-clock></div><md-dialog-actions layout=\"row\"><span flex=\"\"></span><md-button ng-click=\"timepicker.cancel()\" aria-label=\"{{::timepicker.labels.cancel}}\">{{::timepicker.labels.cancel}}</md-button><md-button ng-click=\"timepicker.confirm()\" class=\"md-primary\" aria-label=\"{{::timepicker.labels.ok}}\">{{::timepicker.labels.ok}}</md-button></md-dialog-actions></div></md-dialog-content></md-dialog>')}])}();\n})();"],"sourceRoot":"/source/"}